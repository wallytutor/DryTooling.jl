var documenterSearchIndex = {"docs":
[{"location":"Thermodynamics/#DryTooling.Thermodynamics","page":"Documentation","title":"DryTooling.Thermodynamics","text":"","category":"section"},{"location":"Thermodynamics/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"Thermodynamics/#Examples","page":"Documentation","title":"Examples","text":"","category":"section"},{"location":"Thermodynamics/","page":"Documentation","title":"Documentation","text":"Please go to the module samples page.","category":"page"},{"location":"Thermodynamics/#Theory-guide","page":"Documentation","title":"Theory guide","text":"","category":"section"},{"location":"Thermodynamics/","page":"Documentation","title":"Documentation","text":"Please go to the module theory guide page.","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"<div class=\"citation canonical\"><dl><dt>[1]</dt>\n<dd>\n<div id=\"Patankar1980\">S. V. Patankar. <i>Numerical heat transfer and fluid flow</i>. <a href='https://doi.org/https://doi.org/10.1201/9781482234213'>Taylor & Francis (1980)</a>.</div>\n</dd><dt>[2]</dt>\n<dd>\n<div id=\"Gunn1978\">D. J. Gunn. <i>Transfer of heat or mass to particles in fixed and fluidised beds</i>. <a href='https://doi.org/10.1016/0017-9310(78)90080-7'>International Journal of Heat and Mass Transfer <b>21</b>, 467–476 (1978)</a>.</div>\n</dd><dt>[3]</dt>\n<dd>\n<div id=\"Kramers1952\">H. Kramers and P. Croockewit. <i>The passage of granular solids through inclined rotary kilns</i>. <a href='https://doi.org/10.1016/0009-2509(52)87019-8'>Chemical Engineering Science <b>1</b>, 259–265 (1952)</a>.</div>\n</dd><dt>[4]</dt>\n<dd>\n<div id=\"Slycke1981\">J. Slycke and T. Ericsson. <i>A study of reactions occurring during the carbonitriding process</i>. <a href='https://doi.org/10.1007/BF02833069'>Journal of Heat Treatment <b>2</b>, 3-19 (1981)</a>.</div>\n</dd><dt>[5]</dt>\n<dd>\n<div id=\"Slycke1981a\">J. Slycke and T. Ericsson. <i>A study of reactions occurring during the carbonitriding process part II</i>. <a href='https://doi.org/10.1007/BF02833226'>Journal of Heat Treatment <b>2</b>, 97-112 (1981)</a>.</div>\n</dd><dt>[6]</dt>\n<dd>\n<div id=\"DalMazSilva2017\">W. D. Silva, J. Dulcy, J. Ghanbaja, A. Redjaïmia, G. Michel, S. Thibault and T. Belmonte. <i>Carbonitriding of low alloy steels: Mechanical and metallurgical responses</i>. <a href='https://doi.org/10.1016/j.msea.2017.03.077'>Materials Science and Engineering: A <b>693</b>, 225–232 (2017)</a>.</div>\n</dd>\n</dl></div>","category":"page"},{"location":"PlugFlow/samples/#DryTooling.PlugFlow-samples","page":"Examples","title":"DryTooling.PlugFlow samples","text":"","category":"section"},{"location":"PlugFlow/samples/","page":"Examples","title":"Examples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"PlugFlow/samples/#Basic-plug-flow-reactors","page":"Examples","title":"Basic plug-flow reactors","text":"","category":"section"},{"location":"PlugFlow/samples/#Simplified-acetylene-pyrolysis","page":"Examples","title":"Simplified acetylene pyrolysis","text":"","category":"section"},{"location":"PlugFlow/samples/","page":"Examples","title":"Examples","text":"using CairoMakie\nusing LaTeXStrings\nusing DryTooling.FiniteVolumes\nusing DryTooling.Kinetics\nusing DryTooling.PlugFlow\nusing DryTooling: convertsccmtomassflow\nusing DryTooling: meanmolecularmass\nusing DryTooling: molefraction2massfraction\nusing DryTooling: massfraction2molefraction\n\nfunction plotgraf2007(grid, X)\n    \"\"\" Helper function for standard model results display. \"\"\"\n    f = Figure(resolution = (900, 900))\n\n    f[1, 1] = GridLayout()\n    f[2, 1] = GridLayout()\n    f[3, 1] = GridLayout()\n\n    ax1 = Axis(f[1, 1])\n    ax2 = Axis(f[2, 1])\n    ax3 = Axis(f[3, 1])\n\n    linkxaxes!(ax1, ax2, ax3)\n\n    lines!(ax1, 100grid.r, 100X[:, 1], label = L\"\\mathrm{C_2H_2}\")\n    lines!(ax2, 100grid.r, 100X[:, 2], label = L\"\\mathrm{H_2}\")\n    lines!(ax2, 100grid.r, 100X[:, 3], label = L\"\\mathrm{C_2H_4}\")\n    lines!(ax2, 100grid.r, 100X[:, 4], label = L\"\\mathrm{CH_4}\")\n    lines!(ax3, 100grid.r, 100X[:, 5], label = L\"\\mathrm{C_4H_4}\")\n    lines!(ax3, 100grid.r, 100X[:, 6], label = L\"\\mathrm{C_6H_6}\")\n    lines!(ax3, 100grid.r, 100X[:, 7], label = L\"\\mathrm{C(s)}\")\n\n    ax1.ylabel = \"Mole percentage [%]\"\n    ax2.ylabel = \"Mole percentage [%]\"\n    ax3.ylabel = \"Mole percentage [%]\"\n    ax3.xlabel = \"Coordinate [cm]\"\n\n    ax1.xticks = 0.0:10:100last(grid.r)\n    ax2.xticks = 0.0:10:100last(grid.r)\n    ax3.xticks = 0.0:10:100last(grid.r)\n\n    xlims!(ax1, extrema(ax1.xticks.val))\n    xlims!(ax2, extrema(ax1.xticks.val))\n    xlims!(ax3, extrema(ax1.xticks.val))\n\n    axislegend(ax1; position = :rt)\n    axislegend(ax2; position = :lt)\n    axislegend(ax3; position = :lt)\n\n    return f\nend","category":"page"},{"location":"PlugFlow/samples/","page":"Examples","title":"Examples","text":"# Dimensions of reactor [m].\nR = 0.014\nL = 0.5\n\n# Create a grid for the reactor.\ngrid = equidistantcellsgrid1D(L, 20)\n\n# Cross-section of reactor [m²].\nA = (π * R^2)\n\n# Get mechanism with rates.\nkin = Graf2007AcetyleneKinetics()\n\n# Create reactor model to solve.\npfr = IsothermalSymbolicPlugFlowReactor(kin)\n\n# Initial condition.\nT = 1173.15\nP = 5000.0\nY = let\n    # Mole fraction of acetylene (1) in system.\n    x1 = 0.36\n\n    # Add acetylene impurities to initialization.\n    # NOTE: in reference thesis it was assumed 98% purity and acetone\n    # content of 1.8%, but that species is not available in Graf (2007).\n    X = zeros(length(kin.W))\n    X[1] = 0.998 * x1\n    X[4] = 0.002 * x1\n    X[end] = 1 - sum(X[1:end-1])\n\n    # Convert to mass fractions for the model.\n    molefraction2massfraction(X, kin.W)\nend\n\n# Compute mass flow rate.\nM = meanmolecularmass(Y, kin.W)\nṁ = convertsccmtomassflow(222.0, 1000M)\n\n# Integrate problem over domain.\nsol = solve(pfr; z = grid.r, Y, T, P, ṁ, A, L)\n\n# Get mole fractions for plotting.\nX = map((y)->massfraction2molefraction(y, kin.W), sol.u)\nX = mapreduce(permutedims, vcat, X)\n\nfig = plotgraf2007(grid, X)","category":"page"},{"location":"FiniteVolumes/validation/carburizing/#Validation-of-iron-carburizing-model","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"","category":"section"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"The model hereafter introduced makes use of the diffusion coefficients provided by Slycke and Ericsson [4] [5]. Simulation conditions and results are to be confronted with those provided by Dal'Maz Silva et al. [6].","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"using CairoMakie\nusing DryTooling\nusing DryTooling.Simulation\nusing DryTooling.FiniteVolumes\nusing DryTooling.FiniteVolumes: carburizemoletomassfraction\nusing DryTooling.FiniteVolumes: carburizemasstomolefraction\n\nM = 30\nα = 0.05\nε = 1.0e-10\n\nhour = 3600.0\nshowstairs = true\n\nyaero0 = 0.0016\nyaeros = 0.0100\n\nyauto0 = 0.0023\nyautos = 0.0095\n\nfunction getcarburizingmodel(L, N, h, T, ys)\n    C = carburizemasstomolefraction(ys)\n    grid = equidistantcellsgrid1D(L, N)\n    model = AusteniteCarburizing1DModel(; grid, h, C, T)\n    return model\nend","category":"page"},{"location":"FiniteVolumes/validation/carburizing/#Common-conditions","page":"Validation of iron carburizing model","title":"Common conditions","text":"","category":"section"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"Some conditions listed below will be shared across the simulations that follow. In the block below we find space discretization and physical conditions for model setup. Solver parameters are irrelevant in what follows and are kept hidden in the setup block (for checking them, please consider consulting the raw documentation files in project repository).","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"N = 100       # Number of cells\nL = 0.002     # Length [m]\nT = 1173.15   # Temperature [K]\nτ = 50.0      # Characteristic time-step [s]","category":"page"},{"location":"FiniteVolumes/validation/carburizing/#Carburizing-of-alloy-16NiCrMo13","page":"Validation of iron carburizing model","title":"Carburizing of alloy 16NiCrMo13","text":"","category":"section"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"For alloy 16NiCrMo13 we perform 2 hours of carbon enrichment followed by 3 hours of zero flux (closed system) diffusion.","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"enrich  = 2hour\ndiffuse = 3hour","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"Mass transfer coefficient is then declared as a time function. A high value of 1.0 enforces an almost-Dirichlet boundary condition, while 0.0 closes the system.","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"h = (t) -> (t < enrich) ? 1.0 : 0.0","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"A wrapper was created to initialize the model and used below. Starting from initial time, we perform the carburizing step. The initial condition is provided through x with the alloy's initial carbon content. Below we see the plot of convergence tracking during the solution.","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"model = getcarburizingmodel(L, N, h, T, yaeros)\n\nt0 = 0.0\nt = enrich\nx = carburizemasstomolefraction(yaero0)\n@time solve(model; t, τ, x, M, α, ε, t0)\nres1 = plotsimulationresiduals(model.res[]; showinner = true)[1]\nres1","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"xticks = 0.0:0.2:1.2                                               # hide\nyticks = 0.0:0.2:1.0                                               # hide\nfig, ax = plotcarburizedprofile(model, yaero0; showstairs, xticks, # hide\n                                yticks, label = \"Carburizing\");    # hide","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"Now we continue the process from final time of carburizing for the whole diffusion interval. Again we inspect the residuals for this step.","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"t0 = t\nt = diffuse\nx = nothing\n@time solve(model; t, τ, x, M, α, ε, t0)\nres2 = plotsimulationresiduals(model.res[]; showinner = true)[1]\nres2","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"Below we see the state of the system after both carburizing and homogeneization diffusion steps.","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"z = model.grid.r                                                     # hide\nyc = carburizemoletomassfraction.(model.problem.x)                   # hide\nlines!(ax, 1000z, 100reverse(yc); color = :red, label = \"Diffusion\") # hide\naxislegend(ax; position = :rt)                                       # hide\nfig                                                                  # hide","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"Mass intake approaches the reference value of 23.5 gcdotpm^-2obtained by diffusion profile integration by Dal'Maz Silva et al. [6].","category":"page"},{"location":"FiniteVolumes/validation/carburizing/#Carburizing-of-alloy-23MnCrMo5","page":"Validation of iron carburizing model","title":"Carburizing of alloy 23MnCrMo5","text":"","category":"section"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"For alloy 23MnCrMo5 we perform 2 hours of carbon enrichment followed by 4 hours of zero flux (closed system) diffusion. To make it shorter, all the code is presented in a single block below.","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"enrich  = 2hour\ndiffuse = 4hour\n\nh = (t) -> (t < enrich) ? 1.0 : 0.0\n\nmodel = getcarburizingmodel(L, N, h, T, yautos) \n\nt0 = 0.0\nt = enrich\nx = carburizemasstomolefraction(yauto0)\n@time solve(model; t, τ, x, M, α, ε, t0)\nxticks = 0.0:0.2:1.2                                               # hide\nyticks = 0.2:0.2:1.0                                               # hide\nfig, ax = plotcarburizedprofile(model, yauto0; showstairs, xticks, # hide\n                                yticks, label = \"Carburizing\");    # hide\n\nt0 = t\nt = diffuse\nx = nothing\n@time solve(model; t, τ, x, M, α, ε, t0)\n\nz = model.grid.r                                                     # hide\nyc = carburizemoletomassfraction.(model.problem.x)                   # hide\nlines!(ax, 1000z, 100reverse(yc); color = :red, label = \"Diffusion\") # hide\naxislegend(ax; position = :rt)                                       # hide\nfig                                                                  # hide","category":"page"},{"location":"FiniteVolumes/validation/carburizing/","page":"Validation of iron carburizing model","title":"Validation of iron carburizing model","text":"Mass intake does not approache the reference value of 15.3 gcdotpm^-2obtained by diffusion profile integration by Dal'Maz Silva et al. [6], but that obtained by direct sample mass change of 20.5 gcdotpm^-2. Because of the lack of experimental reproduction and high uncertainty in measurements, results are considered to be in good agreement.","category":"page"},{"location":"FluidModels/samples/#DryTooling.FluidModels-samples","page":"Examples","title":"DryTooling.FluidModels samples","text":"","category":"section"},{"location":"FluidModels/samples/","page":"Examples","title":"Examples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"Cantera/samples/#DryTooling.Cantera-samples","page":"Examples","title":"DryTooling.Cantera samples","text":"","category":"section"},{"location":"Cantera/samples/","page":"Examples","title":"Examples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"Cantera/samples/","page":"Examples","title":"Examples","text":"# cantera = \"C:\\\\Program Files\\\\Cantera\\\\bin\\\\cantera_shared.dll\"\n\n# ENV[\"CANTERA_SHARED\"] = cantera\n# @assert haskey(ENV, \"CANTERA_SHARED\")","category":"page"},{"location":"Cantera/samples/","page":"Examples","title":"Examples","text":"# import DryTooling.Cantera as ct","category":"page"},{"location":"Cantera/samples/","page":"Examples","title":"Examples","text":"# FIXME: how to run this in GitHub???\n\n# @assert ct.appdelete()\n# @assert ct.resetstorage()\n# @assert ct.clearstorage()\n# @assert ct.suppress_thermo_warnings(true)\n# @assert ct.use_legacy_rate_constants(false)\n# ```\n\n# ```@example cantera\n# sol = ct.Solution(\"gri30.yaml\", \"gri30\", \"mixture-averaged\")\n# gas = ct.Solution(\"gri30.yaml\", \"gri30\", \"mixture-averaged\")\n\n# Xᵣ = zeros(sol.nspecies)\n# Xᵣ[1] = 1.0\n\n# Tᵣ = 3500.0\n# Pᵣ = 50000.0\n\n# ct.set_TPX!(sol, Tᵣ, Pᵣ, Xᵣ; norm = true)\n\n# @assert ct.gettemperature(sol) ≈ Tᵣ\n# @assert ct.getpressure(sol) ≈ Pᵣ\n# @assert all(ct.getmolefractions(sol) ≈ Xᵣ)\n\n# ct.equilibrate!(sol, \"HP\", print_results = true)","category":"page"},{"location":"FiniteVolumes/samples/#DryTooling.FiniteVolumes-samples","page":"Examples","title":"DryTooling.FiniteVolumes samples","text":"","category":"section"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"FiniteVolumes/samples/#Heat-conduction","page":"Examples","title":"Heat conduction","text":"","category":"section"},{"location":"FiniteVolumes/samples/#Simple-1-D-geometries","page":"Examples","title":"Simple 1-D geometries","text":"","category":"section"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"In this example we compare solutions with different 1D solvers available in the module.","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"using CairoMakie\nusing ExtendableGrids: geomspace\nusing DryTooling.FiniteVolumes\nusing DryTooling.Simulation: plotsimulationresiduals","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"# These are the common parameters used in all simulation cases.\n# It is possible to use numerical or functional arguments.\nargs_num = (\n    h = 20.0,\n    B = 1500.0,\n    κ = 2.0,\n    ρ = 3000.0,\n    c = 900.0\n)\n\nargs_fun = (\n    h = (t) -> 20.0,\n    B = (t) -> 1500.0 + 20 * rand(),\n    κ = (T) -> 2.0 + 0.01 * T,\n    ρ = 3000.0,\n    c = 900.0\n)\n\n# Comment/uncomment line to select example arguments.\n# args = args_num\nargs = args_fun\n\n# Common parameters used when calling the solver.\nsolve_pars = (\n    t = 600.0,\n    τ = 2.0,\n    T = 300.0,\n    α = 0.01,\n    ε = 1.0e-10,\n    M = 20\n)","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"# A simple 1D grid for both the cylinder or sphere.\ngrid = equidistantcellsgrid1D(0.05, 20)\n\n# Create models.\nmodel_cyl = Cylinder1DTemperatureModel(; grid, args...)\nmodel_sph = Sphere1DTemperatureModel(; grid, args...)\n\n# Solve models, *i.e.* integrate over time.\nsolve(model_cyl; solve_pars...)\nsolve(model_sph; solve_pars...)\n\n# Visualize residuals if using under-relaxation.\nif solve_pars.α > 0.0\n    fig_cyl = plotsimulationresiduals(model_cyl.res[]; ε = solve_pars.ε)[1]\n    fig_sph = plotsimulationresiduals(model_sph.res[]; ε = solve_pars.ε)[1]\nend","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"# Compare solutions: the sphere should heat faster!\nfig = let\n    fig = Figure(resolution = (720, 500))\n    ax = Axis(fig[1, 1], yscale = identity)\n    lines!(ax, 100model_cyl.grid.r, model_cyl.problem.x, label = \"Cylinder\")\n    lines!(ax, 100model_sph.grid.r, model_sph.problem.x, label = \"Sphere\")\n    ax.xlabel = \"Radial coordinate [cm]\"\n    ax.ylabel = \"Temperature [K]\"\n    ax.xticks = 0.0:1.0:100last(model_cyl.grid.r)\n    axislegend(ax; position = :lt)\n    fig\nend","category":"page"},{"location":"FiniteVolumes/samples/#Grid-types-support","page":"Examples","title":"Grid types support","text":"","category":"section"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"In this example we illustrate the support to arbitrary space discretizations.","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"using CairoMakie\nusing ExtendableGrids: geomspace\nusing DryTooling.FiniteVolumes\nusing DryTooling.Simulation: plotsimulationresiduals","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"N = 100\nR = 0.05\n\ngrids = [\n    equidistantcellsgrid1D(R, N),\n    geometriccellsgrid1D(R, N),\n    UserDefinedGrid1D(geomspace(0, R, 0.003, 0.0005))\n]","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"fig = let\n    fig = Figure(resolution = (720, 500))\n    ax = Axis(fig[1, 1], yscale = identity)\n\n    for grid in grids\n        c = 900.0\n        ρ = 3000.0\n        h = (t) -> (t < 2000) ? 20000.0 : 0.0\n        B = (t) -> 1500.0 + 200sin(2π * t / 240)\n        κ = (T) -> 2.0 + 0.0001T\n        model = Cylinder1DTemperatureModel(; grid, h, B, κ, ρ, c)\n        @time solve(model; t = 2400.0, τ = 2.0, T = 300.0, M = 50)\n        lines!(ax, 100grid.r, model.problem.x, label = \"N = $(grid.N)\")\n    end\n\n    ax.xlabel = \"Radial coordinate [cm]\"\n    ax.ylabel = \"Temperature [K]\"\n    ax.xticks = 0.0:1.0:100R\n    xlims!(ax, (-0.2, 100R+0.2))\n    axislegend(ax; position = :lt)\n\n    fig\nend","category":"page"},{"location":"FiniteVolumes/samples/#Diffusion-in-solids","page":"Examples","title":"Diffusion in solids","text":"","category":"section"},{"location":"FiniteVolumes/samples/#Plain-iron-carburizing","page":"Examples","title":"Plain iron carburizing","text":"","category":"section"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"using CairoMakie\nusing DryTooling\nusing DryTooling.Simulation\nusing DryTooling.FiniteVolumes\nusing DryTooling.FiniteVolumes: carburizemoletomassfraction","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"N = 100\nL = 0.002\nT = 1173.15\nτ = 10.0\n\nt = 5*3600.0\ny0 = 0.0023\nys = 0.0095\nh = (t) -> (t <= 7200.0) ? 1.0e-03 : 0.0\n\ngrid = equidistantcellsgrid1D(L, N)\nmodel = carburize(grid, t, τ, T, h, y0, ys, ; M = 50)\n\nz = model.grid.r\ny = carburizemoletomassfraction.(model.problem.x)\nm = interstitialmassintake(model.grid.r, y0, y)","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"fig = let\n    fig = Figure(resolution = (720, 500))\n    ax = Axis(fig[1, 1], yscale = identity)\n    lines!(ax, 1000z, 100reverse(y))\n    ax.title  = \"Mass intake $(round(m, digits = 2)) g/m²\"\n    ax.xlabel = \"Coordinate [cm]\"\n    ax.ylabel = \"Mass percentage [%]\"\n    ax.xticks = 0.0:0.2:1.2\n    ax.yticks = 0.2:0.1:0.6\n    xlims!(ax, extrema(ax.xticks.val))\n    ylims!(ax, extrema(ax.yticks.val))\n    fig\nend","category":"page"},{"location":"FiniteVolumes/samples/","page":"Examples","title":"Examples","text":"fig = plotsimulationresiduals(model.res[]; showinner = false)[1]","category":"page"},{"location":"Granular/#DryTooling.Granular","page":"Documentation","title":"DryTooling.Granular","text":"","category":"section"},{"location":"Granular/#General-porous-media","page":"Documentation","title":"General porous media","text":"","category":"section"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"DryTooling.Granular.PackedBedPorosityDescriptor","category":"page"},{"location":"Granular/#DryTooling.Granular.PackedBedPorosityDescriptor","page":"Documentation","title":"DryTooling.Granular.PackedBedPorosityDescriptor","text":"Provides description of porosity parameters with stochastic behavior.\n\nϕ::Union{Float64, Vector{Float64}}: Porosity volume fraction in medium [-].\nl::Union{Float64, Vector{Float64}}: Characteristic particle size in medium [m].\nσϕ::Union{Nothing, Float64}: Optional standard deviation of porosity volume fraction  [-].\nσl::Union{Nothing, Float64}: Optional standard deviation of characteristic particle size [m].\nP::Union{Float64, Vector{Float64}}: Perimeter in reactor cross-section [m].\nD::Union{Float64, Vector{Float64}}: Characteristic diameter of porosity channels [m].\nA::Float64: Reactor area used for scaling perimeter [m²].\n\nUsage\n\nPackedBedPorosityDescriptor can be used to describe the geometry of exchange section of a packed bed for a single set of arguments.\n\njulia> using DryTooling.Granular\n\njulia> PackedBedPorosityDescriptor(; ϕ = 0.65, l = 0.10, area = 1.0)\nPackedBedPorosityDescriptor(P = 21.000000 m, D = 0.123810 m)\n\nIt can also be used to describe randomly varying reactors, what is a more realistic thing to do when using this structure to simulate real world systems.\n\njulia> using DryTooling.Granular\n\njulia> PackedBedPorosityDescriptor(;\n            ϕ  = 0.65, l  = 0.10,\n            σϕ = 0.03, σl = 0.01,\n            N = 2,\n            ϕlims = (0.4, 0.8),\n            llims = (0.0, 0.3),\n            seed = 42,\n            area = 1.0\n        )\nPackedBedPorosityDescriptor(\n    P from  21.455749 m to  24.370742 m\n    D from   0.125589 m to   0.102353 m\n)\n\n\n\n\n\n","category":"type"},{"location":"Granular/#Rotary-kiln-models","page":"Documentation","title":"Rotary kiln models","text":"","category":"section"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"The structure SymbolicLinearKramersModel implements the Kramers' ordinary differential equation for prediction of bed height profile in a rotary kiln. This equation is implemented under the formalism of ModelingToolkit.","category":"page"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"DryTooling.Granular.SymbolicLinearKramersModel","category":"page"},{"location":"Granular/#DryTooling.Granular.SymbolicLinearKramersModel","page":"Documentation","title":"DryTooling.Granular.SymbolicLinearKramersModel","text":"Creates a reusable linear Kramers model for rotary kiln simulation.\n\nR::Symbolics.Num: Symbolic kiln internal radius\nΦ::Symbolics.Num: Symbolic kiln feed rate\nω::Symbolics.Num: Symbolic kiln rotation rate\nβ::Symbolics.Num: Symbolic kiln slope\nγ::Symbolics.Num: Symbolic solids repose angle\nz::Symbolics.Num: Symbolic kiln axial coordinates\nh::Symbolics.Num: Symbolic bed height profile\nsys::ModelingToolkit.ODESystem: Problem ordinary differential equation\n\n\n\n\n\n","category":"type"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"Description of a rotary kiln bed geometry computed from the solution of bed height along the kiln length. The main goal of the quantities computed here is their use with heat and mass transfer models for the simulation of rotary kiln process.","category":"page"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"DryTooling.Granular.RotaryKilnBedSolution\nDryTooling.Granular.plotlinearkramersmodel","category":"page"},{"location":"Granular/#DryTooling.Granular.RotaryKilnBedSolution","page":"Documentation","title":"DryTooling.Granular.RotaryKilnBedSolution","text":"General geometric description of a bed from Kramers equation solution.\n\nz::Vector{Float64}: Solution coordinates [m]\nh::Vector{Float64}: Solution bed height [m]\nθ::Vector{Float64}: View angle from kiln center [rad]\nl::Vector{Float64}: Bed-freeboard cord length [m]\nA::Vector{Float64}: Local bed cross section area [m²]\nη::Vector{Float64}: Local loading based on height [-]\nηₘ::Float64: Mean loading of kiln [%]\nV::Float64: Bed integral volume [m³]\nτ::Float64: Residence time of particles\nβ::Float64: Kiln slope [rad]\n\nArguments\n\nInternal elements are initialized through the following constructor:\n\nRotaryKilnBedSolution(z::Vector{Float64}, h::Vector{Float64}, R::Float64, Φ::Float64)\n\nWhere parameters are given as:\n\nz: solution coordinates over length, [m].\nh: bed profile solution over length, [m].\nR: kiln internal radius, [m].\nΦ: kiln feed rate, [m³/s].\n\nAn outer constructor is also provided for managing the integration of an instance of SymbolicLinearKramersModel. This is the recommended usage that is illustrated below.\n\nImportant: inputs must be provided in international system (SI) units as a better physical practice. The only exception is the rotation rate ω provided in revolution multiples. If the discharge end is held by a dam, its height must be provided instead of the particle size, as it is used as the ODE initial condition.\n\nmodel: a symbolic kiln model.\nL: kiln length, [m].\nR: kiln internal radius, [m].\nΦ: kiln feed rate, [m³/s].\nω: kiln rotation rate, [rev/s].\nβ: kiln slope, [rad].\nγ: solids repose angle, [rad].\nd: particle size or dam height, [m].\nsolver: Solver for DifferentialEquations. Defaults to Tsit5.\nrtol: Relative integration tolerance. Defaults to 1.0e-08.\natol: Absolute integration tolerance. Defaults to 1.0e-08.\n\nUsage\n\nData in next example is an SI conversion of an example from Kramers (1952).\n\njulia> using DryTooling.Granular\n\njulia> L = 13.715999999999998;  # Kiln length [m]\n\njulia> D = 1.8897599999999999;  # Kiln diameter [m]\n\njulia> β = 2.3859440303888126;  # Kiln slope [°]\n\njulia> γ = 45.0;                # Repose angle [°]\n\njulia> d = 1.0;                 # Particle/dam size [mm]\n\njulia> Φ = 10.363965852671996;  # Feed rate [m³/h]\n\njulia> ω = 3.0300000000000002;  # Rotation rate [rev/min]\n\njulia> bed = RotaryKilnBedSolution(;\n            model = SymbolicLinearKramersModel(),\n            L     = L,\n            R     = D / 2.0,\n            Φ     = Φ / 3600.0,\n            ω     = ω / 60.0,\n            β     = deg2rad(β),\n            γ     = deg2rad(γ),\n            d     = d / 1000.0\n        );\n\njulia> bed\nRotaryKilnBedSolution(τ = 13.169938 min, ηₘ = 5.913271 %)\n\njulia> bed.τ\n790.1963002204092\n\n\n\n\n\n","category":"type"},{"location":"Granular/#DryTooling.Granular.plotlinearkramersmodel","page":"Documentation","title":"DryTooling.Granular.plotlinearkramersmodel","text":"plotlinearkramersmodel(\n    model::RotaryKilnBedSolution;\n    normz::Bool = false,\n    normh::Bool = false\n)::Figure\n\nStandardized plotting of RotaryKilnBedSolution bed profile. It supports normalization of axes throught keywords normz for axial coordinate and normh for bed depth.\n\n\n\n\n\n","category":"function"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"Finally a set of basic equations provided for process analysis.","category":"page"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"DryTooling.Granular.sullivansηₘ\nDryTooling.Granular.dimlessNΦ\nDryTooling.Granular.dimlessNₖ\nDryTooling.Granular.perrayresidence\nDryTooling.Granular.kramersnlapprox","category":"page"},{"location":"Granular/#DryTooling.Granular.sullivansηₘ","page":"Documentation","title":"DryTooling.Granular.sullivansηₘ","text":"Sullivans approximation to kiln filling.\n\n\n\n\n\n","category":"function"},{"location":"Granular/#DryTooling.Granular.dimlessNΦ","page":"Documentation","title":"DryTooling.Granular.dimlessNΦ","text":"Kramers (1952) dimensionless group NΦ.\n\n\n\n\n\n","category":"function"},{"location":"Granular/#DryTooling.Granular.dimlessNₖ","page":"Documentation","title":"DryTooling.Granular.dimlessNₖ","text":"Kramers (1952) dimensionless group Nₖ.\n\n\n\n\n\n","category":"function"},{"location":"Granular/#DryTooling.Granular.perrayresidence","page":"Documentation","title":"DryTooling.Granular.perrayresidence","text":"Compute residence time from Peray's equation.\n\n\n\n\n\n","category":"function"},{"location":"Granular/#DryTooling.Granular.kramersnlapprox","page":"Documentation","title":"DryTooling.Granular.kramersnlapprox","text":"Nonlinear formulation of Kramers model approximate solution.\n\n\n\n\n\n","category":"function"},{"location":"Granular/#Theory-guide","page":"Documentation","title":"Theory guide","text":"","category":"section"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"Please go to the module theory guide page.","category":"page"},{"location":"Granular/#Models-validation","page":"Documentation","title":"Models validation","text":"","category":"section"},{"location":"Granular/","page":"Documentation","title":"Documentation","text":"Kramers' model","category":"page"},{"location":"Granular/samples/#DryTooling.Granular-samples","page":"Examples","title":"DryTooling.Granular samples","text":"","category":"section"},{"location":"Granular/samples/","page":"Examples","title":"Examples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"Granular/theory/#DryTooling.Granular-theory","page":"Granular models","title":"DryTooling.Granular theory","text":"","category":"section"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"Pages = [\"theory.md\"]\nDepth = 3","category":"page"},{"location":"Granular/theory/#Geometrical-properties-of-granular-media","page":"Granular models","title":"Geometrical properties of granular media","text":"","category":"section"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"Modeling of geometrical characteristics of porous beds is required for including both their thermal effect or role over chemistry in chemical reactors. A classical approach used in several commercial and open source tools is that of Gunn [2]. In what follows we develop the ideas that lead to an analogous model which is implemented by this structure.","category":"page"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"To build the model we will assume a reactor of constant rectangular cross-section A_r=bw and volume V_R=bwh. Its cross-section perimeter is then P_R=2(b+w). Inside this reactor we randomly pack cubic particles beta of surface area A_beta=6l_beta^2 and volume V_beta=l_beta^3 at a porosity level phi. Thus the total volume of solids inside the reactor is V_S=(1-phi)V_R and the approximate number of particles N=fracV_SV_beta. Following a similar reasoning the total surface area of particles is A_S=NA_beta. Performing all the substitutions so far one finds the following expression","category":"page"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"A_S=frac6(1-phi)bwhl_beta","category":"page"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"Since the differential dA=Pdl holds for the surface of a body over its length l, one can divide the above expression by the reactor length to get the perimeter of particles in a cross-section. We can further divide by the cross-section area itself and find the perimeter density which is a more general result, and find the expression proposed by Gunn [2]. This result is summarized in the next equation where the subscript of particle size was dropped for generality.","category":"page"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"P = frac6(1-phi)l","category":"page"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"An estimator of the number of channels per unit cross-section of reactor N can be related to the porosity through NpiR^2=phi. Because the above perimeter is shared between the fluid volume and solids, it holds that N2piR=P. Using these expressions one can solve for the porosity channels characteristic radius R as given below, which is also a result reported by Gunn [2].","category":"page"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"R=fracphil3(1-phi)","category":"page"},{"location":"Granular/theory/#Powder-bed-profile-in-rotary-drums","page":"Granular models","title":"Powder bed profile in rotary drums","text":"","category":"section"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"in a rotary kiln as proposed by Kramers and Croockewite (1952) [3]. Its goal is to be used as a process support tool or to integrate more complex models requiring integration of the bed profile. In its classical statement, the bed height profile h(z) can be evaluated from volume of flowing material conservation through the following equations. Coordinate z=0 represents the discharge position where initial condition must be applied. This is given by the dam height, if any, or particle size.","category":"page"},{"location":"Granular/theory/","page":"Granular models","title":"Granular models","text":"beginaligned\ndfracdhdz = C₁ fleft(frachRright) - C₂6pt\nC₁             = frac34dfracΦtanγπ R^3 ω6pt\nC₂             = dfractanβcosγ6pt\nf(r)           = (2r - r²)^-frac32\nendaligned","category":"page"},{"location":"FiniteVolumes/#DryTooling.FiniteVolumes","page":"Documentation","title":"DryTooling.FiniteVolumes","text":"","category":"section"},{"location":"FiniteVolumes/#Grid-generation","page":"Documentation","title":"Grid generation","text":"","category":"section"},{"location":"FiniteVolumes/","page":"Documentation","title":"Documentation","text":"DryTooling.FiniteVolumes.UserDefinedGrid1D\nDryTooling.FiniteVolumes.geometriccellsgrid1D\nDryTooling.FiniteVolumes.equidistantcellsgrid1D","category":"page"},{"location":"FiniteVolumes/#DryTooling.FiniteVolumes.UserDefinedGrid1D","page":"Documentation","title":"DryTooling.FiniteVolumes.UserDefinedGrid1D","text":"A minimal 1D grid with cells centers and walls.\n\nProvides a very simple interface for the 1D grids used in standard finite volume solvers provided in the package. Constructor accepts a vector of coordinates and compute walls at mid-points between cells centers. First and last cells are over the boundaries and the models must consider this in the implementation.\n\nN::Int64: Number of cells in domain, size of solution memory per variable.\nr::Vector{Float64}: Radial coordinates of cells centers.\nw::Vector{Float64}: Radial coordinates of cells walls.\n\n\n\n\n\n","category":"type"},{"location":"FiniteVolumes/#DryTooling.FiniteVolumes.geometriccellsgrid1D","page":"Documentation","title":"DryTooling.FiniteVolumes.geometriccellsgrid1D","text":"geometriccellsgrid(R::Float64, N::Int64)::UserDefinedGrid1D\n\nHelper for creating a UserDefinedGrid1D with all nodes equidistant.\n\n\n\n\n\n","category":"function"},{"location":"FiniteVolumes/#DryTooling.FiniteVolumes.equidistantcellsgrid1D","page":"Documentation","title":"DryTooling.FiniteVolumes.equidistantcellsgrid1D","text":"equidistantcellsgrid(R::Float64, N::Int64)::UserDefinedGrid1D\n\nHelper for creating a UserDefinedGrid1D with all nodes equidistant.\n\n\n\n\n\n","category":"function"},{"location":"FiniteVolumes/#Heat-conduction","page":"Documentation","title":"Heat conduction","text":"","category":"section"},{"location":"FiniteVolumes/#Mass-transfer","page":"Documentation","title":"Mass transfer","text":"","category":"section"},{"location":"FiniteVolumes/","page":"Documentation","title":"Documentation","text":"DryTooling.FiniteVolumes.plotcarburizedprofile","category":"page"},{"location":"FiniteVolumes/#DryTooling.FiniteVolumes.plotcarburizedprofile","page":"Documentation","title":"DryTooling.FiniteVolumes.plotcarburizedprofile","text":"plotcarburizedprofile(\n\tmodel::AusteniteCarburizing1DModel,\n\tyc0::Float64;\n\tshowstairs = true,\n\txticks = nothing,\n\tyticks = nothing,\n    label = nothing\n)\n\nDisplay carburized profile and mass intake in a standardized way.\n\n\n\n\n\n","category":"function"},{"location":"FiniteVolumes/#Theory-guide","page":"Documentation","title":"Theory guide","text":"","category":"section"},{"location":"FiniteVolumes/","page":"Documentation","title":"Documentation","text":"Please go to the module theory guide page.","category":"page"},{"location":"FiniteVolumes/#Models-validation","page":"Documentation","title":"Models validation","text":"","category":"section"},{"location":"FiniteVolumes/","page":"Documentation","title":"Documentation","text":"Iron carburizing","category":"page"},{"location":"toc/#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"toc/","page":"Table of contents","title":"Table of contents","text":"Depth = 4","category":"page"},{"location":"Kinetics/theory/#DryTooling.Kinetics-theory","page":"Kinetics","title":"DryTooling.Kinetics theory","text":"","category":"section"},{"location":"Kinetics/theory/","page":"Kinetics","title":"Kinetics","text":"Pages = [\"theory.md\"]\nDepth = 3","category":"page"},{"location":"Kinetics/#DryTooling.Kinetics","page":"Documentation","title":"DryTooling.Kinetics","text":"","category":"section"},{"location":"Kinetics/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"Kinetics/#Examples","page":"Documentation","title":"Examples","text":"","category":"section"},{"location":"Kinetics/","page":"Documentation","title":"Documentation","text":"Please go to the module samples page.","category":"page"},{"location":"Kinetics/#Theory-guide","page":"Documentation","title":"Theory guide","text":"","category":"section"},{"location":"Kinetics/","page":"Documentation","title":"Documentation","text":"Please go to the module theory guide page.","category":"page"},{"location":"FiniteVolumes/theory/#DryTooling.FiniteVolumes-theory","page":"Finite volumes","title":"DryTooling.FiniteVolumes theory","text":"","category":"section"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Pages = [\"theory.md\"]\nDepth = 3","category":"page"},{"location":"FiniteVolumes/theory/#Heat-conduction","page":"Finite volumes","title":"Heat conduction","text":"","category":"section"},{"location":"FiniteVolumes/theory/#Cylindrical-coordinates-1-D","page":"Finite volumes","title":"Cylindrical coordinates 1-D","text":"","category":"section"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Heat equation formulated with temperature as dependent variable is stated as:","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"rhoc_pfracpartialTpartialt=nablacdotp(knablaT)","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"For computing the heating dynamics in a cylinder, using the definition of divergence in cylindrical coordinates and using the gradient expansion over the radius we have","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"rhoc_pfracpartialTpartialt=\nfrac1rfracpartialpartialr\nleft(rkfracpartialTpartialrright)","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"To proceed with the finite volume discretization we perform the integration of both sides of the equation over the relevant variables. The order of integration is chosen according to the nature of the derivative term, as discussed by Patankar [1]. Care must be taken in the definition of the space integration, which is non-trivial in cylindrical coordinates systems and must be carried over the differential volume dV.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"int_Vint_0^tau\nrhoc_pfracpartialTpartialtdtdV=\nint_0^tauint_V\nfrac1rfracpartialpartialr\nleft(rkfracpartialTpartialrright)dVdt","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"This differential volume is given by dV=rdrdthetadz. Since the problem is specified to be symmetric around cylinder center (this must include initial conditions), the azimuth and axial components can be moved outside the time and radial integration and lead to a common 2piz factor in both sides of the equation, which cancels out.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"int_0^zint_0^2pidthetadz=2piz","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"The integration over radial coordinate introduces the rdr factor from the differential volume and we get the final form of the equation to integrate.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"int_s^nint_0^tau\nrhoc_pfracpartialTpartialtrdtdr=\nint_0^tauint_s^n\nfracpartialpartialr\nleft(rkfracpartialTpartialrright)drdt","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Effecting the inner integration and moving out constant terms from the integrals we have","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"rhoc_pleft(T_P^tau-T_P^0right)int_s^nrdr=\nint_0^tau\nleft(rkfracpartialTpartialrright)biggvert_s^ndt","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Expanding the evaluation of the definite integral between control volume boundaries s and n and performing a Crank-Nicolson integration of the right-hand side one gets","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginaligned\n    fracrhoc_ptau\n    left(T_P^tau-T_P^0right)\n    left(fracr_n^22-fracr_s^22right)\n    =fleft\n    r_nk_nfracT_N^tau-T_P^taudelta_PN-\n    r_sk_sfracT_P^tau-T_S^taudelta_PS\n    right8pt\n    +(1-f)left\n    r_nk_nfracT_N^0-T_P^0delta_PN-\n    r_sk_sfracT_P^0-T_S^0delta_PS\n    right\nendaligned","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Some coefficients appearing in the above equations are now grouped. Notice that for thermal conductivity k which is a function of temperature, the corresponding time-step temperature must be used for its evaluation. For beta_j the lower case j represents the evaluation at the interface with control volume J, what is a very specific notation.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginaligned\n    alpha_P   = fracrhoc_p2tauleft(r_n^2-r_s^2right)8pt\n    beta_j    = fracr_jk_jdelta_PJ\nendaligned","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"For conciseness we make g=(1-f) and simplify the expression with the new coefficients as","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"-fbeta_sT_S+\n(alpha_P+fbeta_n+fbeta_s)T_P\n-fbeta_nT_N\n=\ngbeta_sT_S^0+\n(alpha_P-gbeta_n-gbeta_s)T_P^0+\ngbeta_nT_N^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"\\subsection{Implicit implementation}","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"For the fully implicit time-stepping scheme f=1 the expression reduces to","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"-beta_sT_S+\n(alpha_P+beta_n+beta_s)T_P\n-beta_nT_N\n=\nalpha_PT_P^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"where the following coefficients are identified","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginaligned\n    a_S  = -beta_s8pt\n    a_N  = -beta_n8pt\n    a_P  = alpha_P+beta_n+beta_s\nendaligned","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"and the standard format FVM discretization is reached","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_ST_S + a_PT_P + a_NT_N = alpha_PT_P^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"A condition for symmetry is that no flux traverses the center of the cylinder at r=0. That implies that south derivatives in discrete form of the equation must vanish to enforce dotq(0t)=0, so the first row of the problem is modified to","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_1T_P + a_NT_N = alpha_PT_P^0quadtextwherequada_1=alpha_P+beta_n","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Over the external radius r=R a Robin boundary condition is imposed. In this case the heat flux dotq=U(T_infty-T_P) takes the place of north term in FVM discretization and the equation writes","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_ST_S + a_RT_P = alpha_PT_P^0+UT_inftyquadtextwherequada_R=alpha_P+U+beta_s","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"It must be noted here that U=Rh, where the actual heat transfer coefficient is h. This should be self-evident from a dimensional analysis.","category":"page"},{"location":"FiniteVolumes/theory/#Spherical-coordinates-1-D","page":"Finite volumes","title":"Spherical coordinates 1-D","text":"","category":"section"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"In the case of spherical coordinates we start with a modification in divergence operator as follows","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"rhoc_pfracpartialTpartialt=\nfrac1r^2fracpartialpartialr\nleft(r^2kfracpartialTpartialrright)","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"The expression is again integrated over time and the differential volume dV.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"int_Vint_0^tau\nrhoc_pfracpartialTpartialtdtdV=\nint_0^tauint_V\nfrac1r^2fracpartialpartialr\nleft(r^2kfracpartialTpartialrright)dVdt","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"This differential volume is given by dV=r^2sinphidrdthetadphi. Since the problem is specified to be symmetric around sphere center (this must include initial conditions), the polar and azimuth components can be moved outside the time and radial integration and lead to a common 4pi factor in both sides of the equation, which cancels out.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"int_0^piint_0^2pisinphidthetadphi=4pi","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"The integration over radial coordinate introduces the r^2dr factor from the differential volume and we get the final form of the equation to integrate.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"int_s^nint_0^tau\nrhoc_pfracpartialTpartialtr^2dtdr=\nint_0^tauint_s^n\nfracpartialpartialr\nleft(r^2kfracpartialTpartialrright)drdt","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"After effecting the inner integration and moving out constant terms from the integrals and expanding the evaluation of the definite integral between control volume boundaries s and n and performing a Crank-Nicolson integration of the right-hand side one gets","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginaligned\n    fracrhoc_ptau\n    left(T_P^tau-T_P^0right)\n    left(fracr_n^33-fracr_s^33right)\n    =fleft\n    r_n^2k_nfracT_N^tau-T_P^taudelta_PN-\n    r_s^2k_sfracT_P^tau-T_S^taudelta_PS\n    right8pt\n    +(1-f)left\n    r_n^2k_nfracT_N^0-T_P^0delta_PN-\n    r_s^2k_sfracT_P^0-T_S^0delta_PS\n    right\nendaligned","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Some coefficients appearing in the above equations are now grouped. Notice that for thermal conductivity k which is a function of temperature, the corresponding time-step temperature must be used for its evaluation. For beta_j the lower case j represents the evaluation at the interface with control volume J, what is a very specific notation.","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginaligned\n    alpha_P   = fracrhoc_p3tauleft(r_n^3-r_s^3right)8pt\n    beta_j    = fracr_j^2k_jdelta_PJ\nendaligned","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"For conciseness we make g=(1-f) and simplify the expression with the new coefficients as","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"-fbeta_sT_S+\n(alpha_P+fbeta_n+fbeta_s)T_P\n-fbeta_nT_N\n=\ngbeta_sT_S^0+\n(alpha_P-gbeta_n-gbeta_s)T_P^0+\ngbeta_nT_N^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"\\subsection{Implicit implementation}","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"For the fully implicit time-stepping scheme f=1 the expression reduces to","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"-beta_sT_S+\n(alpha_P+beta_n+beta_s)T_P\n-beta_nT_N\n=\nalpha_PT_P^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"where the following coefficients are identified","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginaligned\n    a_S  = -beta_s8pt\n    a_N  = -beta_n8pt\n    a_P  = alpha_P+beta_n+beta_s\nendaligned","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"and the standard format FVM discretization is reached","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_ST_S + a_PT_P + a_NT_N = alpha_PT_P^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"A condition for symmetry is that no flux traverses the center of the sphere at r=0. That implies that south derivatives in discrete form of the equation must vanish to enforce dotq(0t)=0, so the first row of the problem is modified to","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_1T_P + a_NT_N = alpha_PT_P^0quadtextwherequada_1=alpha_P+beta_n","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Over the external radius r=R a Robin boundary condition is imposed. In this case the heat flux dotq=U(T_infty-T_P) takes the place of north term in FVM discretization and the equation writes","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_ST_S + a_RT_P = alpha_PT_P^0+UT_inftyquadtextwherequada_R=alpha_P+U+beta_s","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"It must be noted here that U=R^2h, where the actual heat transfer coefficient is h. This should be self-evident from a dimensional analysis.","category":"page"},{"location":"FiniteVolumes/theory/#Mass-transfer","page":"Finite volumes","title":"Mass transfer","text":"","category":"section"},{"location":"FiniteVolumes/theory/#Carbon-diffusion-in-plain-iron","page":"Finite volumes","title":"Carbon diffusion in plain iron","text":"","category":"section"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"fracpartialxpartialt=nablacdotp(D(x)nablaT)","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"fracpartialxpartialt=\nfracpartialpartialx\nleft(D(x)fracpartialxpartialzright)","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"int_s^nint_0^tau\nfracpartialxpartialtdtdz=\nint_0^tauint_s^n\nfracpartialpartialz\nleft(D(x)fracpartialxpartialzright)dzdt","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"left(x_P^tau-x_P^0right)(w_n-w_s)=\nint_0^tau\nleft(D(x)fracpartialTpartialrright)biggvert_s^ndt","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginalign\nleft(x_P^tau-x_P^0right)frac(w_n-w_s)tau=\nfleft\nD(x_n)fracx_N^tau-x_P^taudelta_PN-\nD(x_s)fracx_P^tau-x_S^taudelta_PS\nright8pt\n+(1-f)left\nD(x_n)fracx_N^0-x_P^0delta_PN-\nD(x_s)fracx_P^0-x_S^0delta_PS\nright\nendalign","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginalign\nalpha_P   = frac(w_n-w_s)tau8pt\nbeta_j    = fracD(x_j)delta_PJ\nendalign","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"-fbeta_sx_S+\n(alpha_P+fbeta_n+fbeta_s)x_P\n-fbeta_nx_N\n=\ngbeta_sx_S^0+\n(alpha_P-gbeta_n-gbeta_s)x_P^0+\ngbeta_nx_N^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"-beta_sx_S+\n(alpha_P+beta_n+beta_s)x_P\n-beta_nx_N\n=\nalpha_Px_P^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"beginalign\na_S  = -beta_s8pt\na_N  = -beta_n8pt\na_P  = alpha_P+beta_n+beta_s\nendalign","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_Sx_S + a_Px_P + a_Nx_N = alpha_Px_P^0","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_1x_P + a_Nx_N = alpha_Px_P^0quadtextwherequada_1=alpha_P+beta_n","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"a_Sx_S + a_Rx_P = alpha_Px_P^0+hx_inftyquadtextwherequada_R=alpha_P+h+beta_s","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"note: About mass intake calculation\n","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"rho_Fe = fracm_FeV_cell","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"y_C = fracm_Cm_Fe + m_C","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"m_Fe+C = fracm_Fe1 - y_C","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"rho_Fe+C = rho_Fefrac11 - y_C","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"sigma = int_0^Lrho(z)y_C(z)dz","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"sigma = rho_Feint_0^Lfracy_C(z)1-y_C(z)dz","category":"page"},{"location":"FiniteVolumes/theory/","page":"Finite volumes","title":"Finite volumes","text":"Deltasigma = rho_Feleft(int_0^Lfracy_C(z)1-y_C(z)dzright)biggrvert_t=0^t=t_f","category":"page"},{"location":"FluidModels/#DryTooling.FluidModels","page":"Documentation","title":"DryTooling.FluidModels","text":"","category":"section"},{"location":"FluidModels/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"FluidModels/#Examples","page":"Documentation","title":"Examples","text":"","category":"section"},{"location":"FluidModels/","page":"Documentation","title":"Documentation","text":"Please go to the module samples page.","category":"page"},{"location":"FluidModels/#Theory-guide","page":"Documentation","title":"Theory guide","text":"","category":"section"},{"location":"FluidModels/","page":"Documentation","title":"Documentation","text":"Please go to the module theory guide page.","category":"page"},{"location":"Granular/validation/kramers-model/#Validation-of-Kramers'-model","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"","category":"section"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"using CairoMakie\nusing CSV\nusing DataFrames\nusing Latexify\nusing Printf\nusing DryTooling.Granular\n\n\"Partial data from Kramers (1952) Table 3\"\nconst DATA_TABLE3 = \"\"\"\\\nρ,γ,tan(β),n,ṁ,prod_dimless,η̄ᵣ,hold_real\n1480.0,36.0,0.0094,0.059,5.15e-03,18.3,0.111,8.10\n1480.0,36.0,0.0094,0.090,2.68e-03,6.25,0.054,5.00\n1480.0,36.0,0.0094,0.195,1.32e-02,14.2,0.088,7.75\n1480.0,36.0,0.0094,0.232,7.24e-03,6.55,0.043,3.85\n1480.0,36.0,0.0100,0.040,6.38e-03,29.7,0.169,13.3\n1480.0,36.0,0.0100,0.040,5.00e-03,23.2,0.144,11.2\n1480.0,36.0,0.0100,0.069,9.20e-03,24.8,0.150,10.6\n1480.0,36.0,0.0100,0.069,6.53e-03,17.6,0.113,8.50\n1480.0,36.0,0.0100,0.106,1.50e-02,27.8,0.162,12.2\n1480.0,36.0,0.0100,0.159,1.20e-02,14.0,0.092,7.49\n1480.0,36.0,0.0100,0.238,1.55e-02,12.1,0.083,7.48\n1480.0,36.0,0.0100,0.238,1.19e-02,9.22,0.068,6.13\n\"\"\"\n\n\"Compares approximate analytical to numerical solution.\"\nfunction solvekiln(; L, D, Φ, ω, β, γ, d, show = true)\n    model = RotaryKilnBedSolution(;\n        model = SymbolicLinearKramersModel(),\n        L     = L,\n        R     = D / 2.0,\n        Φ     = Φ / 3600.0,\n        ω     = ω / 60.0,\n        β     = deg2rad(β),\n        γ     = deg2rad(γ),\n        d     = d / 1000.0\n    )\n\n    optim = kramersnlapprox(;\n        z = model.z,\n        R = D / 2.0,\n        Φ = Φ / 3600.0,\n        ω = ω / 60.0,\n        β = deg2rad(β),\n        γ = deg2rad(γ),\n        d = d / 1000.0\n    )\n\n    f = nothing\n    ax = nothing\n\n    if show\n        f = Figure()\n        ax = Axis(f[1, 1])\n\n        lines!(ax, 100model.z/L, 100model.h, linewidth = 3, label = \"Numerical\")\n        lines!(ax, 100optim.z/L, 100optim.h, linewidth = 3, label = \"Analytical\")\n\n        a = @sprintf(\"%.1f\", model.ηₘ)\n        b = @sprintf(\"%.1f\", optim.ηₘ)\n        title = \"Loading: $(a)% (numerical) | $(b)% (analytical)\"\n\n        ax.title = title\n        ax.xlabel = \"Coordinate [%]\"\n        ax.ylabel = \"Bed height [cm]\"\n        ax.xticks = 0.0:20.0:100.0\n        xlims!(ax, extrema(ax.xticks.val))\n    end\n\n    return model, optim, f, ax\nend\n\n\"Reference case for alumina kiln testing.\"\nfunction aluminakiln(ṁ, ω; show = false)\n    # Density of bed [kg/m³]\n    ρ = 800.0\n    L = 34.0\n    D = 1.5\n    β = atan(0.025)\n\n    model, optim, f, ax = solvekiln(\n        L = L,\n        D = D,\n        Φ = (1000// 24) * ṁ / ρ,\n        ω = ω,\n        β = rad2deg(β),\n        γ = 33.0,\n        d = 0.050,\n        show = show\n    )\n\n    τₚ = perrayresidence(L, ω, D, β)\n\n    return model, optim, f, ax, τₚ\nend\n\n\"Run `aluminakiln` against some known conditions.\"\nfunction scanaluminakiln()\n    ṁlist = [33.6, 43.2]\n    ωlist = [0.85, 1.20]\n\n    df = DataFrame(\n        ṁ = Float64[],\n        ω = Float64[],\n        η̄ = Float64[],\n        τᵢ = Float64[],\n        τₚ = Float64[]\n    )\n\n    for ṁ ∈ ṁlist, ω ∈ ωlist\n        model, _, _, _, τ = aluminakiln(ṁ, ω, show = false)\n        η̄ = round(model.ηₘ, digits = 0)\n        τᵢ = round(model.τ / 60.0, digits = 0)\n        τₚ = round(τ, digits = 0)\n        push!(df, [ṁ ω η̄ τᵢ τₚ])\n    end\n\n    return df\nend\n\nlet\n    # @info(\"Solution of reference case\")\n\n    in1_to_m1(v) = 0.0254 * v\n    ft1_to_m1(v) = in1_to_m1(12.0) * v\n    ft3_to_m3(v) = ft1_to_m1(1.0)^3 * v\n\n    # Kiln length [m]\n    L = ft1_to_m1(45.0)\n\n    # Kiln diameter [m]\n    D = 2 * ft1_to_m1(3.1)\n\n    # Volume flow rate [m³/h]\n    Φ = ft3_to_m3(6.1) * 60\n\n    # Rotation rate (+0.0005) [rev/min]\n    ω = 0.0505 * 60.0\n\n    # Kiln slope (0.5in/ft) [°]\n    β = rad2deg(atan(0.5 / 12))\n\n    # Repose angle [°]\n    γ = 45.0\n\n    # Particle size [mm]\n    d = 0.050\n\n    # Conversions to match model inputs.\n    R = D / 2.0\n    Φ = Φ / 3600.0\n    ω = ω / 60.0\n    β = deg2rad(β)\n    γ = deg2rad(γ)\n    d = d / 1000.0\n\n    # Create problem container.\n    kramers = RotaryKilnBedSolution(;\n        model = SymbolicLinearKramersModel(),\n        L     = L,\n        R     = R,\n        Φ     = Φ,\n        ω     = ω,\n        β     = β,\n        γ     = γ,\n        d     = d\n    )\n\n    optim = kramersnlapprox(;\n        z = kramers.z,\n        R = R,\n        Φ = Φ,\n        ω = ω,\n        β = β,\n        γ = γ,\n        d = d\n    )\n\n    global kramers_NΦ = dimlessNΦ(R, β, ω, Φ, γ)\n    global kramers_Nₖ = dimlessNₖ(L, R, β, γ)\n    global kramers_η̄ₛ = sullivansηₘ(R, β, ω, Φ, γ)\n    global kramers_ref = kramers\n    global optim_ref = optim\n\n    global RESULTS_TABLE = DataFrame(\n        Quantity  = [\n            \"NΦ\",\n            \"Nₖ\",\n            \"η̄ᵣ\",\n            \"η̄ᵢ\",\n        ],\n        Reference = [\n            \"1.15\",\n            \"1.17\",\n            \"5.65\",\n            @sprintf(\"%.2f\", optim_ref.ηₘ)\n        ],\n        Computed  = [\n            @sprintf(\"%.2f\", kramers_NΦ),\n            @sprintf(\"%.2f\", kramers_Nₖ),\n            @sprintf(\"%.2f\", kramers_η̄ₛ),\n            @sprintf(\"%.2f\", kramers_ref.ηₘ)\n        ]\n    )\nend\n\nconst TABLE3 = let\n    # @info(\"Verification of *Table 3*\")\n\n    Dₖ = 0.197\n    Lₖ = 1.780\n    dₖ = 0.0012\n\n    table3 = DataFrame(CSV.File(IOBuffer(DATA_TABLE3)))\n    table3[!, \"η̄ᵢ\"] = zeros(length(table3[!, \"η̄ᵣ\"]))\n    table3[!, \"η̄ᵣ\"] *= 100\n\n    model = SymbolicLinearKramersModel()\n\n    for (i, row) in enumerate(eachrow(table3))\n        Φ = 3600.0 * row[\"ṁ\"] / row[\"ρ\"]\n        ω = row[\"n\"] * 60.0\n        β = rad2deg(atan(row[\"tan(β)\"]))\n        γ = row[\"γ\"]\n\n        kramers = RotaryKilnBedSolution(;\n            model = model,\n            L     = Lₖ,\n            R     = Dₖ / 2.0,\n            Φ     = Φ / 3600.0,\n            ω     = ω / 60.0,\n            β     = deg2rad(β),\n            γ     = deg2rad(γ),\n            d     = dₖ / 1000.0\n        )\n\n        table3[i, \"η̄ᵢ\"] = round(kramers.ηₘ, digits = 1)\n    end\n\n    exclude = [\"ρ\", \"γ\", \"prod_dimless\", \"hold_real\"]\n    select(table3, Not(exclude))\nend\n\nconst DIMLESSPLOT = let\n    @info(\"Dimensionless profiles solution\")\n\n    ρ = 1480.0\n    L = 20.0\n    D = 0.197\n    Φ = 5.15e-03 / ρ * 3600\n    ω = 0.059 * 60\n    β = rad2deg(atan(0.0094))\n    γ = 36.0\n\n    # Conversions to match model inputs.\n    R = D / 2.0\n    Φ = Φ / 3600.0\n    ω = ω / 60.0\n    β = deg2rad(β)\n    γ = deg2rad(γ)\n\n    # Things held constant in loop.\n    NΦ = dimlessNΦ(R, β, ω, Φ, γ)\n    Nₖ = dimlessNₖ(L, R, β, γ)\n    model = SymbolicLinearKramersModel()\n\n    f = Figure()\n    ax = Axis(f[1, 1])\n\n    for d in [0.05, 0.10, 0.15, 0.193, 0.25]\n        kramers = RotaryKilnBedSolution(;\n            model = model,\n            L     = L,\n            R     = R,\n            Φ     = Φ,\n            ω     = ω,\n            β     = β,\n            γ     = γ,\n            d     = d * R * NΦ\n        )\n\n        # Dimensionless axes.\n        z = kramers.z\n        h = kramers.h / (R * NΦ)\n        z = @. (L - z) / L * 1 / (NΦ * Nₖ)\n        z = @. z[1] - z\n\n        label = @sprintf(\"%.3f\", d)\n        lines!(ax, z, h; linewidth = 2, label = label)\n    end\n\n    ax.title = \"Dimensionless loading curves\"\n    ax.xlabel = \"Coordinate\"\n    ax.ylabel = \"Bed height\"\n    ax.xticks.val = 0.0:0.1:0.5\n    ax.yticks.val = 0.05:0.05:0.25\n    xlims!(ax, extrema(ax.xticks.val))\n    ylims!(ax, extrema(ax.yticks.val))\n    axislegend(ax; position = :rb)\n\n    f\nend","category":"page"},{"location":"Granular/validation/kramers-model/#Sample-reference-case","page":"Validation of Kramers' model","title":"Sample reference case","text":"","category":"section"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"Here we make use of the current implementation to check if it correctly approximates the last example provided in reference paper from Kramers (1952). To minimize rounding errors causes by unit conversions, we provide the required functions to convert from imperial to international system in the solution process.","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"The next table summarizes the results. It is seen that the dimensionless numbers are well approximated. It must be emphasized that the reference estimates η̄ᵣ by a graphical method – it was 1952 – and the current value is considered a good enough approximation. Additionally, the equation was not integrated numerically as done here, but engineering relationships were used in the approximation. That said, the proper loading to be considered in our days is η̄ᵢ.","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"mdtable(RESULTS_TABLE, latex=false) # hide","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"Note: the last value in column Reference above is not provided in Kramers' paper but computed from the approximate analytical solution provided by the authors. As we see here, it may get >20% error under some circumstances.","category":"page"},{"location":"Granular/validation/kramers-model/#Verification-of-*Table-3*","page":"Validation of Kramers' model","title":"Verification of Table 3","text":"","category":"section"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"In the next cell we provide the kiln dimensions used by Kramers (1952) to experimentally validate the model. Some data from their Tab. 3 is then loaded and all rows are simulated with current model. Fractional hold-up seems to be well correlated at least to a few percent of the reference value.","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"mdtable(TABLE3, latex=false) # hide","category":"page"},{"location":"Granular/validation/kramers-model/#Dimensionless-profiles","page":"Validation of Kramers' model","title":"Dimensionless profiles","text":"","category":"section"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"Next step in validation is to check profiles in dimensionless format, as done by Kramers in their Fig. 3. Notice that here we used the numerical integration curves instead of the analytical approximation of profiles, so reproduction and consequences of results are not exactly the same.","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"DIMLESSPLOT # hide","category":"page"},{"location":"Granular/validation/kramers-model/#Comparison-with-analytical","page":"Validation of Kramers' model","title":"Comparison with analytical","text":"","category":"section"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"The final step in model validation is to compare the approximate analytical solution proposed by Kramers and the results of numerical integration. It is worth mentioning that numerical integration remains the recommended method because one does not need to verify the ranges of validity of analytical approximation for every use case.","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"let                                    # hide\n    _, _, f, ax = solvekiln(           # hide\n        L = 10.0,                      # hide\n        D = 1.0,                       # hide\n        Φ = 1.0,                       # hide\n        ω = 1.0,                       # hide\n        β = 3.0,                       # hide\n        γ = 45.0,                      # hide\n        d = 0.001                      # hide\n    )                                  # hide\n                                       # hide\n    ax.yticks = 0.0:4.0:20.0           # hide\n    ylims!(ax, extrema(ax.yticks.val)) # hide\n    f                                  # hide\nend                                    # hide","category":"page"},{"location":"Granular/validation/kramers-model/#Industrial-cases","page":"Validation of Kramers' model","title":"Industrial cases","text":"","category":"section"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"The following illustrates a practical use case of the model. Next we scan a parameter space to confirm once again the model suitability as an alternative to analytical engineering estimations as per Peray's notebook.","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"let                                                 # hide\n    ṁ = 33.6                                        # hide\n    ω = 0.85                                        # hide\n    _, _, f, ax, _ = aluminakiln(ṁ, ω, show = true) # hide\n    ax.yticks = 0.0:6.0:30.0                        # hide\n    ylims!(ax, extrema(ax.yticks.val))              # hide\n    f                                               # hide\nend                                                 # hide","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"The following table confirms the expected values as per Peray.","category":"page"},{"location":"Granular/validation/kramers-model/","page":"Validation of Kramers' model","title":"Validation of Kramers' model","text":"mdtable(scanaluminakiln(), latex=false) # hide","category":"page"},{"location":"FluidModels/theory/#DryTooling.FluidModels-theory","page":"Fluid models","title":"DryTooling.FluidModels theory","text":"","category":"section"},{"location":"FluidModels/theory/","page":"Fluid models","title":"Fluid models","text":"Pages = [\"theory.md\"]\nDepth = 3","category":"page"},{"location":"api/#Reference-API","page":"Reference API","title":"Reference API","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"In this page you find a list of all documented functions of DryTooling. Rather than being organized in a logical way as the main documentation, we chose (except for the root DryTooling that comes first) to list them in alphabetical order of folders in source directory.","category":"page"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling ]","category":"page"},{"location":"api/#DryTooling.Cantera","page":"Reference API","title":"DryTooling.Cantera","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.Cantera ]","category":"page"},{"location":"api/#DryTooling.FiniteVolumes","page":"Reference API","title":"DryTooling.FiniteVolumes","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.FiniteVolumes ]","category":"page"},{"location":"api/#DryTooling.FluidModels","page":"Reference API","title":"DryTooling.FluidModels","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.FluidModels ]","category":"page"},{"location":"api/#DryTooling.Granular","page":"Reference API","title":"DryTooling.Granular","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.Granular ]","category":"page"},{"location":"api/#DryTooling.Kinetics","page":"Reference API","title":"DryTooling.Kinetics","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.Kinetics ]","category":"page"},{"location":"api/#DryTooling.PlugFlow","page":"Reference API","title":"DryTooling.PlugFlow","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.PlugFlow ]","category":"page"},{"location":"api/#DryTooling.Simulation","page":"Reference API","title":"DryTooling.Simulation","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.Simulation ]","category":"page"},{"location":"api/#DryTooling.Thermodynamics","page":"Reference API","title":"DryTooling.Thermodynamics","text":"","category":"section"},{"location":"api/","page":"Reference API","title":"Reference API","text":"Modules = [ DryTooling.Thermodynamics ]","category":"page"},{"location":"PlugFlow/theory/#DryTooling.PlugFlow-theory","page":"Plug Flow models","title":"DryTooling.PlugFlow theory","text":"","category":"section"},{"location":"PlugFlow/theory/","page":"Plug Flow models","title":"Plug Flow models","text":"Pages = [\"theory.md\"]\nDepth = 3","category":"page"},{"location":"Simulation/samples/#DryTooling.Simulation-samples","page":"DryTooling.Simulation samples","title":"DryTooling.Simulation samples","text":"","category":"section"},{"location":"Simulation/samples/","page":"DryTooling.Simulation samples","title":"DryTooling.Simulation samples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"Simulation/samples/#Residuals-tracking-in-a-solver","page":"DryTooling.Simulation samples","title":"Residuals tracking in a solver","text":"","category":"section"},{"location":"Simulation/samples/","page":"DryTooling.Simulation samples","title":"DryTooling.Simulation samples","text":"The residuals tracking functionalities of module DryTooling.Simulation are not often imported by the end-user (except for its plotting utility function). In this tutorial we illustrate the logic of using a residual tracker in a new solver.","category":"page"},{"location":"Simulation/samples/","page":"DryTooling.Simulation samples","title":"DryTooling.Simulation samples","text":"using DryTooling.Simulation\n\nN = 2      # Number of variables.\nM = 5      # Maximum inner steps.\nsteps = 10 # Time-advancement steps.\n\n# Create a TimeSteppingSimulationResiduals object with the number of variables\n# to track, how many inner iterations per step are expected, and the\n# number of steps.\n#\n# IMPORTANT: If the total number of iterations is exceeded, it is up\n# to the user to allocate more memory, the tracker will not manage it!\nr = TimeSteppingSimulationResiduals(N, M, steps)\n\n# The following loop represents a *dummy solver*. The outer loop\n# provides the time-advancement while the inner loop handles the\n# nonlinear problem. In the inner loop we use a random number\n# generator to provide varying number of steps per outer step.\nfor kouter in 1:steps\n    for kinner in 1:rand(2:M)\n        # Keep track of inner iterations per step.\n        r.innersteps[kouter] = kinner\n\n        # Feed residuals to the solver.\n        addresidual!(r, rand(r.N))\n    end\nend\n\n# After running a simulation we create a new object using another\n# constructor that accepts a `TimeSteppingSimulationResiduals` object. This\n# handles the post-processing.\ns = TimeSteppingSimulationResiduals(r)\n\n# The new object is ready for visualization. Check the documentation\n# of the following function for more details. It provides a raw figure\n# and handles for modifying it for proper display.\nfig = plotsimulationresiduals(s; showinner = true)[1]","category":"page"},{"location":"Kinetics/samples/#DryTooling.Kinetics-samples","page":"Examples","title":"DryTooling.Kinetics samples","text":"","category":"section"},{"location":"Kinetics/samples/","page":"Examples","title":"Examples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"Cantera/status/#Status-of-Cantera-wrapper","page":"Status","title":"Status of Cantera wrapper","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"This is an experimental interface to Cantera library based on its C-API under beta testing version 3.0. This interface is at its early days and has developped for Julia >= 1.9.0 under Windows 10/11. When it is stable enough it will be published as a package and tested under other platforms.","category":"page"},{"location":"Cantera/status/#Useful-links","page":"Status","title":"Useful links","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Source files\nHeader files","category":"page"},{"location":"Cantera/status/#API-of-ct.h","page":"Status","title":"API of ct.h","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Documentation here.","category":"page"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Status Header Function Module\nTested ct.h ct_appdelete inlined\nStruct ct.h soln_newSolution wrapped\n ct.h soln_newInterface waitlist\nTested ct.h soln_del inlined\nTested ct.h soln_name inlined\nStruct ct.h soln_thermo inlined\nStruct ct.h soln_kinetics inlined\nStruct ct.h soln_transport inlined\nTested ct.h soln_setTransportModel wrapped\nTested ct.h soln_nAdjacent inlined\n ct.h soln_adjacent waitlist\nTested ct.h thermo_newFromFile wrapped\nTested ct.h thermo_del inlined\nStruct ct.h thermo_nElements inlined\nStruct ct.h thermo_nSpecies inlined\nTested ct.h thermo_temperature inlined\nStruct ct.h thermo_setTemperature inlined\nTested ct.h thermo_density inlined\nTested ct.h thermo_setDensity inlined\nTested ct.h thermo_molarDensity inlined\nTested ct.h thermo_setMolarDensity inlined\nTested ct.h thermo_meanMolecularWeight inlined\nTested ct.h thermo_moleFraction inlined\nTested ct.h thermo_massFraction inlined\nStruct ct.h thermo_getMoleFractions inlined\nTested ct.h thermo_getMassFractions inlined\nStruct ct.h thermo_setMoleFractions inlined\nTested ct.h thermo_setMassFractions inlined\n ct.h thermo_setMoleFractionsByName \n ct.h thermo_setMassFractionsByName \n ct.h thermo_getAtomicWeights \n ct.h thermo_getMolecularWeights \n ct.h thermo_getCharges \n ct.h thermo_getElementName \n ct.h thermo_getSpeciesName \n ct.h thermo_getName \n ct.h thermo_setName \n ct.h thermo_elementIndex \n ct.h thermo_speciesIndex \n ct.h thermo_report \nTested ct.h thermo_print \n ct.h thermo_nAtoms \n ct.h thermo_addElement \n ct.h thermo_getEosType \nTo test ct.h thermo_refPressure inlined\nTo test ct.h thermo_minTemp inlined\nTo test ct.h thermo_maxTemp inlined\nTo test ct.h thermoenthalpymole inlined\nTo test ct.h thermointEnergymole inlined\nTo test ct.h thermoentropymole inlined\nTo test ct.h thermogibbsmole inlined\nTo test ct.h thermocpmole inlined\nTo test ct.h thermocvmole inlined\nTo test ct.h thermo_pressure inlined\nStruct ct.h thermo_setPressure inlined\nTo test ct.h thermoenthalpymass inlined\nTo test ct.h thermointEnergymass inlined\nTo test ct.h thermoentropymass inlined\nTo test ct.h thermogibbsmass inlined\nTo test ct.h thermocpmass inlined\nTo test ct.h thermocvmass inlined\nTo test ct.h thermo_electricPotential inlined\nTo test ct.h thermo_thermalExpansionCoeff inlined\nTo test ct.h thermo_isothermalCompressibility inlined\n ct.h thermo_chemPotentials \n ct.h thermogetEnthalpiesRT \n ct.h thermogetEntropiesR \n ct.h thermogetCpR \n ct.h thermo_setElectricPotential \n ct.h thermosetTP \n ct.h thermosetTD \n ct.h thermosetRP \n ct.h thermosetDP \n ct.h thermosetHP \n ct.h thermosetUV \n ct.h thermosetSV \n ct.h thermosetSP \n ct.h thermosetST \n ct.h thermosetTV \n ct.h thermosetPV \n ct.h thermosetUP \n ct.h thermosetVH \n ct.h thermosetTH \n ct.h thermosetSH \nTested ct.h thermo_equilibrate \nTo test ct.h thermo_critTemperature inlined\nTo test ct.h thermo_critPressure inlined\nTo test ct.h thermo_critDensity inlined\nTo test ct.h thermo_vaporFraction inlined\n ct.h thermo_satTemperature \n ct.h thermo_satPressure \n ct.h thermosetStatePsat \n ct.h thermosetStateTsat \n ct.h kin_newFromFile \nTo test ct.h kin_del inlined\nTo test ct.h kin_nSpecies inlined\nTo test ct.h kin_nReactions inlined\nTo test ct.h kin_nPhases inlined\n ct.h kin_phaseIndex \nTo test ct.h kin_reactionPhaseIndex inlined\n ct.h kin_reactantStoichCoeff \n ct.h kin_productStoichCoeff \n ct.h kin_getReactionType \n ct.h kin_getFwdRatesOfProgress \n ct.h kin_getRevRatesOfProgress \n ct.h kin_getNetRatesOfProgress \n ct.h kin_getEquilibriumConstants \n ct.h kin_getFwdRateConstants \n ct.h kin_getRevRateConstants \n ct.h kin_getDelta \n ct.h kin_getCreationRates \n ct.h kin_getDestructionRates \n ct.h kin_getNetProductionRates \n ct.h kin_getSourceTerms \nTo test ct.h kin_multiplier inlined\n ct.h kin_getReactionString \n ct.h kin_setMultiplier \nTo test ct.h kin_isReversible inlined\n ct.h kin_getType \nTo test ct.h kin_start inlined\n ct.h kin_speciesIndex \nTo test ct.h kin_advanceCoverages inlined\nTo test ct.h kin_phase inlined\nTo test ct.h trans_newDefault inlined\n ct.h trans_new \nTo test ct.h trans_del inlined\nTo test ct.h trans_transportModel inlined\nTo test ct.h trans_viscosity inlined\nTo test ct.h trans_electricalConductivity inlined\n ct.h trans_thermalConductivity \n ct.h trans_getThermalDiffCoeffs \n ct.h trans_getMixDiffCoeffs \n ct.h trans_getBinDiffCoeffs \n ct.h trans_getMultiDiffCoeffs \n ct.h trans_setParameters \n ct.h trans_getMolarFluxes \n ct.h trans_getMassFluxes \n ct.h ct_getCanteraError \n ct.h ct_setLogWriter \n ct.h ct_setLogCallback \n ct.h ct_addCanteraDirectory \n ct.h ct_getDataDirectories \n ct.h ct_getCanteraVersion \n ct.h ct_getGitCommit \nTested ct.h ctsuppressthermo_warnings inlined\nTested ct.h ctuselegacyrateconstants inlined\nTested ct.h ct_clearStorage inlined\nTested ct.h ct_resetStorage inlined","category":"page"},{"location":"Cantera/status/#API-of-ctfunc.h","page":"Status","title":"API of ctfunc.h","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Documentation here.","category":"page"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Status Header Function Module\n ctfunc.h func_new \n ctfunc.h funcnewbasic \n ctfunc.h funcnewadvanced \n ctfunc.h funcnewcompound \n ctfunc.h funcnewmodified \nTo test ctfunc.h func_del inlined\n ctfunc.h func_type \nTo test ctfunc.h func_value inlined\nTo test ctfunc.h func_derivative inlined\nTo test ctfunc.h func_duplicate inlined\n ctfunc.h func_write \nTo test ctfunc.h ct_clearFunc inlined","category":"page"},{"location":"Cantera/status/#API-of-ctmultiphase.h","page":"Status","title":"API of ctmultiphase.h","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Documentation here.","category":"page"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Status Header Function Module\nTo test ctmultiphase.h mix_new inlined\nTo test ctmultiphase.h mix_del inlined\nTo test ctmultiphase.h ct_clearMix inlined\n ctmultiphase.h mix_addPhase \nTo test ctmultiphase.h mix_init inlined\nTo test ctmultiphase.h mix_updatePhases inlined\nTo test ctmultiphase.h mix_nElements inlined\n ctmultiphase.h mix_elementIndex \n ctmultiphase.h mix_speciesIndex \nTo test ctmultiphase.h mix_nSpecies inlined\nTo test ctmultiphase.h mix_setTemperature inlined\nTo test ctmultiphase.h mix_temperature inlined\nTo test ctmultiphase.h mix_minTemp inlined\nTo test ctmultiphase.h mix_maxTemp inlined\nTo test ctmultiphase.h mix_charge inlined\nTo test ctmultiphase.h mix_phaseCharge inlined\nTo test ctmultiphase.h mix_setPressure inlined\nTo test ctmultiphase.h mix_pressure inlined\nTo test ctmultiphase.h mix_nAtoms inlined\nTo test ctmultiphase.h mix_nPhases inlined\nTo test ctmultiphase.h mix_phaseMoles inlined\n ctmultiphase.h mix_setPhaseMoles \n ctmultiphase.h mix_setMoles \n ctmultiphase.h mix_setMolesByName \nTo test ctmultiphase.h mix_speciesMoles inlined\nTo test ctmultiphase.h mix_elementMoles inlined\n ctmultiphase.h mix_equilibrate \n ctmultiphase.h mix_getChemPotentials \nTo test ctmultiphase.h mix_enthalpy inlined\nTo test ctmultiphase.h mix_entropy inlined\nTo test ctmultiphase.h mix_gibbs inlined\nTo test ctmultiphase.h mix_cp inlined\nTo test ctmultiphase.h mix_volume inlined\nTo test ctmultiphase.h mix_speciesPhaseIndex inlined\nTo test ctmultiphase.h mix_moleFraction inlined","category":"page"},{"location":"Cantera/status/#API-of-ctonedim.h","page":"Status","title":"API of ctonedim.h","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Documentation here.","category":"page"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Status Header Function Module\nTo test ctonedim.h ct_clearOneDim inlined\n ctonedim.h domain_new \nTo test ctonedim.h domain_del inlined\nTo test ctonedim.h domain_type inlined\n ctonedim.h domain_type3 \nTo test ctonedim.h domain_index inlined\nTo test ctonedim.h domain_nComponents inlined\nTo test ctonedim.h domain_nPoints inlined\n ctonedim.h domain_componentName \n ctonedim.h domain_componentIndex \n ctonedim.h domain_setBounds \nTo test ctonedim.h domain_lowerBound inlined\nTo test ctonedim.h domain_upperBound inlined\n ctonedim.h domain_setSteadyTolerances \n ctonedim.h domain_setTransientTolerances \nTo test ctonedim.h domain_rtol inlined\nTo test ctonedim.h domain_atol inlined\n ctonedim.h domain_setupGrid \n ctonedim.h domain_setID \nTo test ctonedim.h domain_grid inlined\nTo test ctonedim.h bdry_setMdot inlined\nTo test ctonedim.h bdry_setTemperature inlined\nTo test ctonedim.h bdry_setSpreadRate inlined\n ctonedim.h bdry_setMoleFractions \nTo test ctonedim.h bdry_temperature inlined\nTo test ctonedim.h bdry_spreadRate inlined\nTo test ctonedim.h bdry_massFraction inlined\nTo test ctonedim.h bdry_mdot inlined\nTo test ctonedim.h reactingsurf_setkineticsmgr inlined\nTo test ctonedim.h reactingsurf_enableCoverageEqs inlined\nTo test ctonedim.h inlet_new inlined\nTo test ctonedim.h outlet_new inlined\nTo test ctonedim.h outletres_new inlined\nTo test ctonedim.h symm_new inlined\nTo test ctonedim.h surf_new inlined\nTo test ctonedim.h reactingsurf_new inlined\nTo test ctonedim.h inlet_setSpreadRate inlined\n ctonedim.h stflow_new \nTo test ctonedim.h stflow_setTransport inlined\nTo test ctonedim.h stflow_enableSoret inlined\nTo test ctonedim.h stflow_setPressure inlined\nTo test ctonedim.h stflow_pressure inlined\n ctonedim.h stflow_setFixedTempProfile \nTo test ctonedim.h stflow_solveEnergyEqn inlined\n ctonedim.h sim1D_new \nTo test ctonedim.h sim1D_del inlined\n ctonedim.h sim1D_setValue \n ctonedim.h sim1D_setProfile \n ctonedim.h sim1D_setFlatProfile \n ctonedim.h sim1D_show \n ctonedim.h sim1D_showSolution \n ctonedim.h sim1D_setTimeStep \nTo test ctonedim.h sim1D_getInitialSoln inlined\n ctonedim.h sim1D_solve \nTo test ctonedim.h sim1D_refine inlined\n ctonedim.h sim1D_setRefineCriteria \n ctonedim.h sim1D_setGridMin \n ctonedim.h sim1D_save \n ctonedim.h sim1D_restore \nTo test ctonedim.h sim1D_writeStats inlined\n ctonedim.h sim1D_domainIndex \n ctonedim.h sim1D_value \n ctonedim.h sim1D_workValue \nTo test ctonedim.h sim1D_eval inlined\nTo test ctonedim.h sim1D_setMaxJacAge inlined\nTo test ctonedim.h sim1D_setFixedTemperature inlined","category":"page"},{"location":"Cantera/status/#API-of-ctreactor.h","page":"Status","title":"API of ctreactor.h","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Documentation here.","category":"page"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Status Header Function Module\n ctreactor.h reactor_new \nTo test ctreactor.h reactor_del inlined\nTo test ctreactor.h reactor_setInitialVolume inlined\nTo test ctreactor.h reactor_setChemistry inlined\nTo test ctreactor.h reactor_setEnergy inlined\nTo test ctreactor.h reactor_setThermoMgr inlined\nTo test ctreactor.h reactor_setKineticsMgr inlined\nTo test ctreactor.h reactor_insert inlined\nTo test ctreactor.h reactor_mass inlined\nTo test ctreactor.h reactor_volume inlined\nTo test ctreactor.h reactor_density inlined\nTo test ctreactor.h reactor_temperature inlined\nTo test ctreactor.h reactorenthalpymass inlined\nTo test ctreactor.h reactorintEnergymass inlined\nTo test ctreactor.h reactor_pressure inlined\nTo test ctreactor.h reactor_massFraction inlined\nTo test ctreactor.h reactor_nSensParams inlined\nTo test ctreactor.h reactor_addSensitivityReaction inlined\nTo test ctreactor.h flowReactor_setMassFlowRate inlined\nTo test ctreactor.h reactornet_new inlined\nTo test ctreactor.h reactornet_del inlined\nTo test ctreactor.h reactornet_setInitialTime inlined\nTo test ctreactor.h reactornet_setMaxTimeStep inlined\nTo test ctreactor.h reactornet_setTolerances inlined\nTo test ctreactor.h reactornet_setSensitivityTolerances inlined\nTo test ctreactor.h reactornet_addreactor inlined\nTo test ctreactor.h reactornet_advance inlined\nTo test ctreactor.h reactornet_step inlined\nTo test ctreactor.h reactornet_time inlined\nTo test ctreactor.h reactornet_rtol inlined\nTo test ctreactor.h reactornet_atol inlined\n ctreactor.h reactornet_sensitivity \n ctreactor.h flowdev_new \nTo test ctreactor.h flowdev_del inlined\nTo test ctreactor.h flowdev_install inlined\nTo test ctreactor.h flowdev_setMaster inlined\nTo test ctreactor.h flowdev_setPrimary inlined\nTo test ctreactor.h flowdev_massFlowRate inlined\nTo test ctreactor.h flowdev_setMassFlowCoeff inlined\nTo test ctreactor.h flowdev_setValveCoeff inlined\nTo test ctreactor.h flowdev_setPressureCoeff inlined\nTo test ctreactor.h flowdev_setPressureFunction inlined\nTo test ctreactor.h flowdev_setTimeFunction inlined\n ctreactor.h wall_new \nTo test ctreactor.h wall_del inlined\nTo test ctreactor.h wall_install inlined\nTo test ctreactor.h wall_vdot inlined\nTo test ctreactor.h wall_expansionRate inlined\nTo test ctreactor.h wall_Q inlined\nTo test ctreactor.h wall_heatRate inlined\nTo test ctreactor.h wall_area inlined\nTo test ctreactor.h wall_setArea inlined\nTo test ctreactor.h wall_setThermalResistance inlined\nTo test ctreactor.h wall_setHeatTransferCoeff inlined\nTo test ctreactor.h wall_setHeatFlux inlined\nTo test ctreactor.h wall_setExpansionRateCoeff inlined\nTo test ctreactor.h wall_setVelocity inlined\nTo test ctreactor.h wall_setEmissivity inlined\nTo test ctreactor.h wall_ready inlined\nTo test ctreactor.h reactorsurface_new inlined\nTo test ctreactor.h reactorsurface_del inlined\nTo test ctreactor.h reactorsurface_install inlined\nTo test ctreactor.h reactorsurface_setkinetics inlined\nTo test ctreactor.h reactorsurface_area inlined\nTo test ctreactor.h reactorsurface_setArea inlined\nTo test ctreactor.h reactorsurface_addSensitivityReaction inlined\nTo test ctreactor.h ct_clearReactors inlined","category":"page"},{"location":"Cantera/status/#API-of-ctrpath.h","page":"Status","title":"API of ctrpath.h","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Documentation here.","category":"page"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Status Header Function Module\nTo test ctrpath.h rdiag_new inlined\nTo test ctrpath.h rdiag_del inlined\nTo test ctrpath.h rdiag_detailed inlined\nTo test ctrpath.h rdiag_brief inlined\nTo test ctrpath.h rdiag_setThreshold inlined\n ctrpath.h rdiag_setBoldColor \n ctrpath.h rdiag_setNormalColor \n ctrpath.h rdiag_setDashedColor \n ctrpath.h rdiag_setDotOptions \nTo test ctrpath.h rdiag_setBoldThreshold inlined\nTo test ctrpath.h rdiag_setNormalThreshold inlined\nTo test ctrpath.h rdiag_setLabelThreshold inlined\nTo test ctrpath.h rdiag_setScale inlined\nTo test ctrpath.h rdiag_setFlowType inlined\nTo test ctrpath.h rdiag_setArrowWidth inlined\n ctrpath.h rdiag_setTitle \n ctrpath.h rdiag_write \nTo test ctrpath.h rdiag_add inlined\n ctrpath.h rdiag_findMajor \n ctrpath.h rdiag_setFont \nTo test ctrpath.h rdiag_displayOnly inlined\nTo test ctrpath.h rbuild_new inlined\nTo test ctrpath.h rbuild_del inlined\n ctrpath.h rbuild_init \n ctrpath.h rbuild_build \nTo test ctrpath.h ct_clearReactionPath inlined","category":"page"},{"location":"Cantera/status/#API-of-ctsurf.h","page":"Status","title":"API of ctsurf.h","text":"","category":"section"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Documentation here.","category":"page"},{"location":"Cantera/status/","page":"Status","title":"Status","text":"Status Header Function Module\n ctsurf.h surf_setCoverages \n ctsurf.h surf_getCoverages \n ctsurf.h surf_setConcentrations \n ctsurf.h surf_getConcentrations \nTo test ctsurf.h surf_setSiteDensity inlined\nTo test ctsurf.h surf_siteDensity inlined\n ctsurf.h surf_setCoveragesByName ","category":"page"},{"location":"DryTooling/samples/#DryTooling-samples","page":"DryTooling samples","title":"DryTooling samples","text":"","category":"section"},{"location":"DryTooling/samples/","page":"DryTooling samples","title":"DryTooling samples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"},{"location":"PlugFlow/#DryTooling.PlugFlow","page":"Documentation","title":"DryTooling.PlugFlow","text":"","category":"section"},{"location":"PlugFlow/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"PlugFlow/#Examples","page":"Documentation","title":"Examples","text":"","category":"section"},{"location":"PlugFlow/","page":"Documentation","title":"Documentation","text":"Please go to the module samples page.","category":"page"},{"location":"PlugFlow/#Theory-guide","page":"Documentation","title":"Theory guide","text":"","category":"section"},{"location":"PlugFlow/","page":"Documentation","title":"Documentation","text":"Please go to the module theory guide page.","category":"page"},{"location":"Simulation/#DryTooling.Simulation","page":"Module Simulation","title":"DryTooling.Simulation","text":"","category":"section"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"NOTE: this module is fragile and breaking changes are still expected. It is not until all the main solvers are migrated that it will become stable. This is necessary for ensuring compatibility with all models.","category":"page"},{"location":"Simulation/#Iterative-solver","page":"Module Simulation","title":"Iterative solver","text":"","category":"section"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"The core of the iterative time-stepping solver is step!. This function that is described below works according to the following solution logic:","category":"page"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"The fouter! update function is called once. This is generall where one implements the right-hand side update of the problem before stepping.\nAn initial update with finner! is done. Normally this is responsible by the update of matrix coefficients that are dependent on solution state.\nIf relaxation α <= 0.0, then the problem is treated as linear.\nOtherwise a maximum of M iterations are repeated, where fsolve! is used to solve the problem (ofter an under-relaxation step) and is also expected to keep track of residuals.\nProblem coefficients are updated with finner! if not converged.","category":"page"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"DryTooling.Simulation.step!","category":"page"},{"location":"Simulation/#DryTooling.Simulation.step!","page":"Module Simulation","title":"DryTooling.Simulation.step!","text":"step!(\n    m::AbstractPhysicalModel,\n    t::Float64,\n    n::Int64;\n    fouter!::Function,\n    finner!::Function,\n    fsolve!::Function,\n    α::Float64 = 0.1,\n    iters::Int64 = 20,\n    tol::Float64 = 1.0e-10\n)\n\nManage the integration of a model m from time t corresponding to step call n using model internal time step. All the updates of coefficients and solution are performed through user-supplied functions.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"The outer iteration for advancing between steps is carried out by advance!.","category":"page"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"DryTooling.Simulation.advance!","category":"page"},{"location":"Simulation/#DryTooling.Simulation.advance!","page":"Module Simulation","title":"DryTooling.Simulation.advance!","text":"advance!(\n    m::AbstractPhysicalModel;\n    α::Float64 = 0.1,\n    ε::Float64 = 1.0e-10,\n    M::Int64 = 20,\n    t0::Float64 = 0.0\n)\n\nManage execution of step! over the integration time interval.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"Any model willing to implement its solution through the methods provided in this module is expected to explicity import and override the behaviour of the following methods for its own type:","category":"page"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"DryTooling.Simulation.fouter!\nDryTooling.Simulation.finner!\nDryTooling.Simulation.fsolve!\nDryTooling.Simulation.timepoints","category":"page"},{"location":"Simulation/#DryTooling.Simulation.fouter!","page":"Module Simulation","title":"DryTooling.Simulation.fouter!","text":"fouter!(::AbstractPhysicalModel, ::Float64, ::Int64)\n\nOuter loop update for step!.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#DryTooling.Simulation.finner!","page":"Module Simulation","title":"DryTooling.Simulation.finner!","text":"finner!(::AbstractPhysicalModel, ::Float64, ::Int64)\n\nInner loop update for step!.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#DryTooling.Simulation.fsolve!","page":"Module Simulation","title":"DryTooling.Simulation.fsolve!","text":"fsolve!(::AbstractPhysicalModel, ::Float64, ::Int64, ::Float64)\n\nSolution update for step!.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#DryTooling.Simulation.timepoints","page":"Module Simulation","title":"DryTooling.Simulation.timepoints","text":"timepoints(::AbstractPhysicalModel)\n\nGet array of model time-points for use in step!.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#Linear-algebra","page":"Module Simulation","title":"Linear algebra","text":"","category":"section"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"DryTooling.Simulation.TridiagonalProblem\nDryTooling.Simulation.solve!(::DryTooling.Simulation.TridiagonalProblem)\nDryTooling.Simulation.change","category":"page"},{"location":"Simulation/#DryTooling.Simulation.TridiagonalProblem","page":"Module Simulation","title":"DryTooling.Simulation.TridiagonalProblem","text":"Memory for a tridiagonal problem of rank N.\n\nAll tensors are filled with zeros upon creation. This is simply a utility for memory allocation, no other operations are made.\n\nA::LinearAlgebra.Tridiagonal{Float64, Vector{Float64}}: Main problem matrix.\nb::Vector{Float64}: Right-hand side vector.\nx::Vector{Float64}: Solution variable vector.\na::Vector{Float64}: Auxiliary vector, e.g. for iterative problems.\n\n\n\n\n\n","category":"type"},{"location":"Simulation/#DryTooling.Simulation.solve!-Tuple{DryTooling.Simulation.TridiagonalProblem}","page":"Module Simulation","title":"DryTooling.Simulation.solve!","text":"solve!(p::TridiagonalProblem)::Nothing\n\nSolve a tridiagonal problem and update internal memory.\n\n\n\n\n\n","category":"method"},{"location":"Simulation/#DryTooling.Simulation.change","page":"Module Simulation","title":"DryTooling.Simulation.change","text":"change(p::TridiagonalProblem)::Vector{Float64}\n\nCompute change in solution of a tridiagonal problem without update.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#Residuals-tracking","page":"Module Simulation","title":"Residuals tracking","text":"","category":"section"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"DryTooling.Simulation.TimeSteppingSimulationResiduals\nDryTooling.Simulation.finaliterationdata\nDryTooling.Simulation.addresidual!\nDryTooling.Simulation.plotsimulationresiduals","category":"page"},{"location":"Simulation/#DryTooling.Simulation.TimeSteppingSimulationResiduals","page":"Module Simulation","title":"DryTooling.Simulation.TimeSteppingSimulationResiduals","text":"Manage time-stepping solvers residuals storage during a simulation.\n\nThe memory is initialized with a given number of inner and outer iterations and resizing is not under the scope of this structure.\n\nN::Int64: Number of variables being tracked in problem.\ncounter::Base.RefValue{Int64}: Total iteration counter.\ninnersteps::Vector{Int64}: Number of inner steps per outer loop in solution.\nresiduals::Matrix{Float64}: Store residuals of each inner step, one variable per column.\n\nUsage\n\nFor starting a simulation, use the outer constructor for starting a simulation with pre-allocated memory with interface:\n\nTimeSteppingSimulationResiduals(N::Int64, inner::Int64, outer::Int64)\n\nOnce the simulation is finished, the first instance can be processed through creation of a new object using the next interface:\n\nTimeSteppingSimulationResiduals(r::TimeSteppingSimulationResiduals)\n\n\n\n\n\n","category":"type"},{"location":"Simulation/#DryTooling.Simulation.finaliterationdata","page":"Module Simulation","title":"DryTooling.Simulation.finaliterationdata","text":"finaliterationdata(\n    r::TimeSteppingSimulationResiduals\n)::Tuple{Vector{Int64}, Matrix{Float64}}\n\nRetrieve data at iterations closing an outer loop of solution.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#DryTooling.Simulation.addresidual!","page":"Module Simulation","title":"DryTooling.Simulation.addresidual!","text":"addresidual!(\n    r::TimeSteppingSimulationResiduals,\n    ε::Vector{Float64}\n)::Nothing\n\nUtility to increment iteration counter and store residuals.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#DryTooling.Simulation.plotsimulationresiduals","page":"Module Simulation","title":"DryTooling.Simulation.plotsimulationresiduals","text":"plotsimulationresiduals(\n    r::TimeSteppingSimulationResiduals;\n    ε::Union{Float64, Nothing} = nothing,\n    showinner::Bool = false,\n    resolution::Tuple{Int64, Int64} = (720, 500)\n)::Tuple{Figure, Axis, Vector}\n\nPlot problem residuals over iterations or steps. It performs the basic figure setup, configuration of axis and details beign left to the user.\n\n\n\n\n\n","category":"function"},{"location":"Simulation/#Examples","page":"Module Simulation","title":"Examples","text":"","category":"section"},{"location":"Simulation/","page":"Module Simulation","title":"Module Simulation","text":"Please go to the module samples page.","category":"page"},{"location":"DryTooling/#DryTooling","page":"DryTooling Core","title":"DryTooling","text":"","category":"section"},{"location":"DryTooling/#DryTooling-Core","page":"DryTooling Core","title":"DryTooling Core","text":"","category":"section"},{"location":"DryTooling/#Physical-constants","page":"DryTooling Core","title":"Physical constants","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.GAS_CONSTANT\nDryTooling.ZERO_CELSIUS\nDryTooling.ONE_ATM\nDryTooling.STEFAN_BOLTZMANN","category":"page"},{"location":"DryTooling/#DryTooling.GAS_CONSTANT","page":"DryTooling Core","title":"DryTooling.GAS_CONSTANT","text":"Ideal gas constant [8.31446261815324 J mol^-1 K^-1].\n\n\n\n\n\n","category":"constant"},{"location":"DryTooling/#DryTooling.ZERO_CELSIUS","page":"DryTooling Core","title":"DryTooling.ZERO_CELSIUS","text":"Zero degrees Celsius in Kelvin [273.15 K].\n\n\n\n\n\n","category":"constant"},{"location":"DryTooling/#DryTooling.ONE_ATM","page":"DryTooling Core","title":"DryTooling.ONE_ATM","text":"Atmospheric pressure at sea level [101325.0 Pa].\n\n\n\n\n\n","category":"constant"},{"location":"DryTooling/#DryTooling.STEFAN_BOLTZMANN","page":"DryTooling Core","title":"DryTooling.STEFAN_BOLTZMANN","text":"Stefan-Boltzmann constant [5.670374419e-8 W m^-2 K^-4]\n\n\n\n\n\n","category":"constant"},{"location":"DryTooling/#Haskell-like-array-slicing","page":"DryTooling Core","title":"Haskell-like array slicing","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.head\nDryTooling.tail\nDryTooling.body","category":"page"},{"location":"DryTooling/#DryTooling.head","page":"DryTooling Core","title":"DryTooling.head","text":"head(z)\n\nAccess view of array head. See also tail and body.\n\njulia> head(1:4)\n1:3\njulia> head([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 1:3) with eltype Int64:\n 1\n 2\n 3\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#DryTooling.tail","page":"DryTooling Core","title":"DryTooling.tail","text":"tail(z)\n\nAccess view of array tail. See also head and body.\n\njulia> tail([1, 2, 3, 4])\n3-element view(::Vector{Int64}, 2:4) with eltype Int64:\n 2\n 3\n 4\njulia> tail(1:4)\n2:4\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#DryTooling.body","page":"DryTooling Core","title":"DryTooling.body","text":"body(z)\n\nAccess view of array body. See also head and tail.\n\njulia> body([1, 2, 3, 4])\n2-element view(::Vector{Int64}, 2:3) with eltype Int64:\n 2\n 3\njulia> body(1:4)\n2:3\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#Handling-of-discontinuous-functions","page":"DryTooling Core","title":"Handling of discontinuous functions","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.heaviside\nDryTooling.interval\nDryTooling.makestepwise1d","category":"page"},{"location":"DryTooling/#DryTooling.heaviside","page":"DryTooling Core","title":"DryTooling.heaviside","text":"heaviside(t)\n\nProvides a Heaviside function compatible with automatic differentiation. This is a requirement for conceiving, e.g., model predictive controls with discontinuous functions under ModelingToolkit.\n\nUsage\n\njulia> heaviside(-2:2)\n5-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#DryTooling.interval","page":"DryTooling Core","title":"DryTooling.interval","text":"interval(x; a=-Inf, b=Inf)\n\nReturns 1 if x  (a b), 1/2 for x = a  x = b, or 0 .\n\nUsage\n\njulia> interval(0:6; a = 2, b = 5)\n7-element Vector{Float64}:\n 0.0\n 0.0\n 0.5\n 1.0\n 1.0\n 0.5\n 0.0\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#DryTooling.makestepwise1d","page":"DryTooling Core","title":"DryTooling.makestepwise1d","text":"makestepwise1d(lo, hi, xc)\n\nCreates an univariate function that is composed of two parts, the first evaluated before a critical domain point xc, and the second above that value. This is often required, for instance, for the evaluation of NASA polynomials for thermodynamic properties. If differentiable, then the returned function is compatible with symbolic argument as required when using package ModelingToolkit, etc.\n\nUsage\n\njulia> f = makestepwise1d(x->x, x->x^2, 1.0; differentiable = true);\n\njulia> f(0:0.2:2.0)\n11-element Vector{Float64}:\n 0.0\n 0.2\n 0.4\n 0.6\n 0.8\n 1.0\n 1.44\n 1.9599999999999997\n 2.5600000000000005\n 3.24\n 4.0\n\njulia> using ModelingToolkit\n\njulia> @variables x\n1-element Vector{Num}:\n x\n\njulia> h(x); # Output is too long, try by yourself.\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#Rounding-numbers-and-automatic-axes","page":"DryTooling Core","title":"Rounding numbers and automatic axes","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.closestpowerofx\nDryTooling.axesunitscaler","category":"page"},{"location":"DryTooling/#DryTooling.closestpowerofx","page":"DryTooling Core","title":"DryTooling.closestpowerofx","text":"closestpowerofx(\n    v::Number;\n    x::Number = 10,\n    roundf::Function = ceil\n)::Int64\n\nCompute the integer power of x closest to v using roundf as rouding method. This might be useful for automatic setting more reasonable limits to plot axis or similar applications. Changing the rouding method through roundf is also possible.\n\njulia> closestpowerofx(12.0; x = 10)\n20\njulia> closestpowerofx(12.0; x = 10, roundf = floor)\n10\njulia> closestpowerofx(12.0; x = 10, roundf = round)\n10\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#DryTooling.axesunitscaler","page":"DryTooling Core","title":"DryTooling.axesunitscaler","text":"axesunitscaler(x::Number)::Tuple{String, Int64}\n\nFind scaling factor for multiples of 1000 units. Together with closestpowerofx this can be used to produce better automatic plot axes limits. The returned values provide the string for modifying the axis label and the associated scaling factor.\n\nNOTE: this function is not yet stable. In the future it will instead return labels using symbols like k, M, G for the units through a flag provided by the user.\n\njulia> axesunitscaler(1)\n(\"\", 1)\njulia> axesunitscaler(1000)\n(\"[×1000]\", 1000)\njulia> axesunitscaler(1000000)\n(\"[×1000000]\", 1000000)\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#Computation-of-changes-and-residuals","page":"DryTooling Core","title":"Computation of changes and residuals","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.maxabsolutechange\nDryTooling.maxrelativechange","category":"page"},{"location":"DryTooling/#DryTooling.maxabsolutechange","page":"DryTooling Core","title":"DryTooling.maxabsolutechange","text":"Maximum absolute change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#DryTooling.maxrelativechange","page":"DryTooling Core","title":"DryTooling.maxrelativechange","text":"Maximum relative change in a solution array.\n\n\n\n\n\n","category":"function"},{"location":"DryTooling/#Abstract-types","page":"DryTooling Core","title":"Abstract types","text":"","category":"section"},{"location":"DryTooling/#Problem-solving-and-physical-models","page":"DryTooling Core","title":"Problem solving and physical models","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.AbstractMatrixProblem\nDryTooling.AbstractIterativeSolver\nDryTooling.AbstractSolutionStorage\nDryTooling.AbstractPhysicalModel","category":"page"},{"location":"DryTooling/#DryTooling.AbstractMatrixProblem","page":"DryTooling Core","title":"DryTooling.AbstractMatrixProblem","text":"Base type for linear algebra problems.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractIterativeSolver","page":"DryTooling Core","title":"DryTooling.AbstractIterativeSolver","text":"Base type for (nonlinear) iterative solvers.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractSolutionStorage","page":"DryTooling Core","title":"DryTooling.AbstractSolutionStorage","text":"Base type for storing simulation solution.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractPhysicalModel","page":"DryTooling Core","title":"DryTooling.AbstractPhysicalModel","text":"Base type for physical models.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#Transport,-thermodynamics,-and-kinetics","page":"DryTooling Core","title":"Transport, thermodynamics, and kinetics","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.AbstractTransportModel\nDryTooling.AbstractSolidTransport\nDryTooling.AbstractGasThermo\nDryTooling.AbstractSolidThermo\nDryTooling.AbstractSolidMaterial\nDryTooling.AbstractMixtureSubstance\nDryTooling.AbstractMixturePhase\nDryTooling.AbstractKineticsMechanism","category":"page"},{"location":"DryTooling/#DryTooling.AbstractTransportModel","page":"DryTooling Core","title":"DryTooling.AbstractTransportModel","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractSolidTransport","page":"DryTooling Core","title":"DryTooling.AbstractSolidTransport","text":"Base type for transport models.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractGasThermo","page":"DryTooling Core","title":"DryTooling.AbstractGasThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractSolidThermo","page":"DryTooling Core","title":"DryTooling.AbstractSolidThermo","text":"Base type for thermodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractSolidMaterial","page":"DryTooling Core","title":"DryTooling.AbstractSolidMaterial","text":"Base type for solid materials.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractMixtureSubstance","page":"DryTooling Core","title":"DryTooling.AbstractMixtureSubstance","text":"Base type for simplified mixture substances.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractMixturePhase","page":"DryTooling Core","title":"DryTooling.AbstractMixturePhase","text":"Base type for simplified mixture phases.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractKineticsMechanism","page":"DryTooling Core","title":"DryTooling.AbstractKineticsMechanism","text":"Base type for coded kinetics mechanisms.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#Finite-volume-method-and-relatives","page":"DryTooling Core","title":"Finite volume method and relatives","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.AbstractDiffusionModel1D\nDryTooling.AbstractGrid1D","category":"page"},{"location":"DryTooling/#DryTooling.AbstractDiffusionModel1D","page":"DryTooling Core","title":"DryTooling.AbstractDiffusionModel1D","text":"Base type for diffusion (heat, species, ...) models.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#DryTooling.AbstractGrid1D","page":"DryTooling Core","title":"DryTooling.AbstractGrid1D","text":"Base type of one-dimensional grids.\n\n\n\n\n\n","category":"type"},{"location":"DryTooling/#Other-constants","page":"DryTooling Core","title":"Other constants","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"DryTooling.STABLE_ELEMENTS_TABLE\nDryTooling.TRANSPORT_MODELS","category":"page"},{"location":"DryTooling/#DryTooling.STABLE_ELEMENTS_TABLE","page":"DryTooling Core","title":"DryTooling.STABLE_ELEMENTS_TABLE","text":"Instantiation of stable elements table. \n\n\n\n\n\n","category":"constant"},{"location":"DryTooling/#DryTooling.TRANSPORT_MODELS","page":"DryTooling Core","title":"DryTooling.TRANSPORT_MODELS","text":"Named access to transport models. \n\n\n\n\n\n","category":"constant"},{"location":"DryTooling/#Examples","page":"DryTooling Core","title":"Examples","text":"","category":"section"},{"location":"DryTooling/","page":"DryTooling Core","title":"DryTooling Core","text":"Please go to the module samples page.","category":"page"},{"location":"Thermodynamics/theory/#DryTooling.Thermodynamics-theory","page":"Thermodynamics","title":"DryTooling.Thermodynamics theory","text":"","category":"section"},{"location":"Thermodynamics/theory/","page":"Thermodynamics","title":"Thermodynamics","text":"Pages = [\"theory.md\"]\nDepth = 3","category":"page"},{"location":"Cantera/#DryTooling.Cantera","page":"Documentation","title":"DryTooling.Cantera","text":"","category":"section"},{"location":"Cantera/","page":"Documentation","title":"Documentation","text":"This page documents the wrapper written around the C-API of Cantera. The status of development is documented here. Its goal is not to mimic the original API or provide an interface equivalent to the Python package, but something in line with the functioning of DryTooling itself.","category":"page"},{"location":"Cantera/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"Cantera/#Examples","page":"Documentation","title":"Examples","text":"","category":"section"},{"location":"Cantera/","page":"Documentation","title":"Documentation","text":"Please go to the module samples page.","category":"page"},{"location":"#DryTooling","page":"Home","title":"DryTooling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DryTooling.","category":"page"},{"location":"#Why?","page":"Home","title":"Why?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"I am often faced with using the same approach for different engineering and scientific problems, but I don't like repeating the same task again and again. This is where DryTooling.jl comes in. By adopting some principles of DRY in Julia, to a larger extent than its definition, it packages together models and workflows that are not available or validated elsewhere - and in some cases adapts existing models. The tools will progressively cover a broad range of numerical applications and data treatment, this package is in its early days from the migration of my old Python scripts and packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also dry tooling is my favorite sport!","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The base case for using DryTooling is calling a pre-built model for solving a specific problem. Several sub-modules handle different Physics and find them in the side-bar. Most models are provided under structures that are already solved during construction or provide a solve! method. In an ideal world they should all be documented, but since this package is still in its early days, some experimental features are not yet documented.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For extending existing models and preferrably contributing to the package's growth, it is possible to use some functionalities provided in the bare DryTooling module, i.e. those made available when calling using DryTooling. They include physical constants, abstract types used all across the package, and some simple functions of general use.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Found it useful? See CITATION.bib for the relevant reference.","category":"page"},{"location":"Thermodynamics/samples/#DryTooling.Thermodynamics-samples","page":"Examples","title":"DryTooling.Thermodynamics samples","text":"","category":"section"},{"location":"Thermodynamics/samples/","page":"Examples","title":"Examples","text":"Pages = [\"samples.md\"]\nDepth = 3","category":"page"}]
}
